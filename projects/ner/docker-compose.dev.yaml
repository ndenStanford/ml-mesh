---
version : '3.9'

services:
  # =============================================
  # TRAIN
  # =============================================

  train:
    build:
      context: ../../
      dockerfile: projects/ner/train/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: train
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v24.1.1}
    volumes:
      - type: bind
        source: train/src
        target: /projects/ner/train/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-train:${IMAGE_TAG:-latest}
    command: [python, -m, src.train_model]
    profiles: [train]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: train/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  train-debug:
    build:
      context: ../../
      dockerfile: projects/ner/train/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: train
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    volumes:
      - type: bind
        source: train/src
        target: /projects/ner-multi/train/src
      - type: bind
        source: train/config
        target: /projects/ner-multi/train/config
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-train:${IMAGE_TAG:-latest}
    command: [python, -m, debugpy, --listen, 0.0.0.0:5678, --wait-for-client, -m, src.train_model]
    ports:
      - 5678:5678
    profiles: [debug]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: train/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  train-unit:
    volumes:
      - type: bind
        source: train/
        target: /projects/ner/train/
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-train:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [train, unit]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # COMPILE
  # =============================================

  compile:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - type: bind
        source: compile
        target: /projects/ner/compile
    build:
      context: ../../
      dockerfile: projects/ner/compile/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: compile
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v24.1.1}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-compile:${IMAGE_TAG:-latest}
    command: [python, -m, src.compile_model]
    profiles: [compile, unit, integration, pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-debug:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/ner/compile/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: compile
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-compile:${IMAGE_TAG:-latest}
    command:
      - /bin/sh
      - -c
      - |
        python -m src.download_uncompiled_model
        python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m src.compile_model
    ports:
      - 5678:5678
    profiles: [debug]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-unit:
    volumes:
      - type: bind
        source: compile
        target: /projects/ner/compile
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-compile:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no, -s]
    profiles: [unit]
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-download-model:
    volumes:
      - type: bind
        source: compile/
        target: /projects/ner/compile/
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-compile:${IMAGE_TAG}
    command: [python, -m, src.download_uncompiled_model]
    profiles: [pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-compile-model:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - type: bind
        source: compile
        target: /projects/ner/compile
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-compile:${IMAGE_TAG}
    command: [python, -m, src.compile_model]
    profiles: [pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-validate-model:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - type: bind
        source: compile
        target: /projects/ner/compile
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-compile:${IMAGE_TAG}
    command: [python, -m, pytest, src/test_compiled_model, -ra, -vvv, --full-trace, --tb=long, --capture=no, -s]
    profiles: [pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-upload-model:
    volumes:
      - type: bind
        source: compile
        target: /projects/ner/compile
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-compile:${IMAGE_TAG}
    command: [python, -m, src.upload_compiled_model]
    profiles: [pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # SERVE
  # =============================================

  # serving image
  serve:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/ner/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v24.1.1}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [python, -m, src.serve.__main__]
    environment:
      ONCLUSIVEML_SERVING_LOGCONFIG_SERVICE: ner-serve
      ONCLUSIVEML_SERVING_LOGCONFIG_LEVEL: 10
      ONCLUSIVEML_SERVING_LOGCONFIG_JSON_FORMAT: false
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-133
      ONCLUSIVEML_SERVING_UVICORN_APP: src.serve.__main__:model_server
      ONCLUSIVEML_SERVING_UVICORN_RELOAD: true
      ONCLUSIVEML_SERVING_UVICORN_RELOAD_DIRS: src/serve/
      ONCLUSIVEML_SERVING_UVICORN_WORKERS: 1
      ONCLUSIVEML_SERVING_UVICORN_PORT: 8000
      ONCLUSIVEML_SERVING_API_VERSION: v1
      PROMETHEUS_MULTIPROC_DIR: /tmp
      NEURON_RT_NUM_CORES: 1
      ONCLUSIVEML_TRACKING_LOGGER_LEVEL: 20 # 10=DEBUG
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
    profiles: [serve, functional, load]
    ports:
      - 8000:8000
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
      - type: bind
        source: serve/src
        target: /projects/ner/serve/src
    hostname: onclusiveml
    networks:
      - onclusive-net
    healthcheck:
      test: [CMD, curl, -f, http://serve:8000/ner/v1/ready]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  # utility service: downloading the compiled model artifact that will be served
  serve-download-model:
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
      - type: bind
        source: serve/src
        target: /projects/ner/serve/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [python, -m, src.download]
    profiles: [serve, functional, load]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      NEPTUNE_CLIENT_MODE: read-only
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
      NEPTUNE_MODEL_VERSION_ID: NER-COMPILED-133
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-133
    hostname: onclusiveml
    networks: [onclusive-net]

  serve-debug:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/ner/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      NEPTUNE_CLIENT_MODE: read-only
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
      NEPTUNE_MODEL_VERSION_ID: NER-COMPILED-133
      ONCLUSIVEML_SERVING_LOGCONFIG_SERVICE: ner-serve
      ONCLUSIVEML_SERVING_LOGCONFIG_LEVEL: 10
      ONCLUSIVEML_SERVING_LOGCONFIG_JSON_FORMAT: false
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-133
      ONCLUSIVEML_SERVING_UVICORN_APP: src.serve.__main__:model_server
      ONCLUSIVEML_SERVING_UVICORN_RELOAD: true
      ONCLUSIVEML_SERVING_UVICORN_RELOAD_DIRS: src/serve/
      ONCLUSIVEML_SERVING_UVICORN_PORT: 8000
      ONCLUSIVEML_SERVING_API_VERSION: v1
      ONCLUSIVEML_TRACKING_LOGGER_LEVEL: 20 # 10=DEBUG
    profiles: [debug]
    command:
      - /bin/sh
      - -c
      - |
        python -m src.download
        python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m src.serve.__main__
    ports:
      - 5678:5678
      - 8000:8000
    hostname: onclusiveml
    networks:
      - onclusive-net

  # unit tests
  # - do NOT include model artifact
  # - do NOT include REST model server process
  serve-unit:
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
      - type: bind
        source: serve/src
        target: /projects/ner/serve/src
      - type: bind
        source: serve/tests
        target: /projects/ner/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    environment:
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-133
      ONCLUSIVEML_SERVING_UVICORN_HTTP_PORT: 8000
      ONCLUSIVEML_SERVING_API_VERSION: v1
      ONCLUSIVEML_TRACKING_LOGGER_LEVEL: 20 # 10=DEBUG
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    hostname: onclusiveml
    networks:
      - onclusive-net

  # integration tests
  # - include model artifact
  # - do NOT include REST model server process
  serve-integration:
    devices:
      - /dev/neuron0:/dev/neuron0 # needs to be different from the `serve` service device
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
      - type: bind
        source: serve/src
        target: /projects/ner/serve/src
      - type: bind
        source: serve/tests
        target: /projects/ner/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [pytest, tests/integration, -ra, -vv, --capture=no, -s]
    environment:
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-133
      ONCLUSIVEML_SERVING_UVICORN_PORT: 8000
      ONCLUSIVEML_SERVING_API_VERSION: v1
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
    profiles: [integration]
    hostname: onclusiveml
    networks:
      - onclusive-net

  # functional tests
  # - include model artifact
  # - include REST model server process
  serve-functional:
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
      - type: bind
        source: serve/src
        target: /projects/ner/serve/src
      - type: bind
        source: serve/tests
        target: /projects/ner/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [pytest, tests/functional, -ra, -vv, --capture=no]
    environment:
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-133
      ONCLUSIVEML_SERVING_UVICORN_PORT: 8000
      ONCLUSIVEML_SERVING_API_VERSION: v1
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
    profiles: [functional]
    hostname: onclusiveml
    networks:
      - onclusive-net
    depends_on:
      serve:
        condition: service_healthy

  # load tests
  # - include model artifact
  # - include REST model server process
  serve-load:
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
      - type: bind
        source: serve/src
        target: /projects/ner/serve/src
      - type: bind
        source: serve/tests
        target: /projects/ner/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [pytest, tests/load, -ra, -vv, --capture=no]
    environment:
    # serving params
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-133
      ONCLUSIVEML_SERVING_UVICORN_PORT: 8000
      ONCLUSIVEML_SERVING_API_VERSION: v1
      # load test params
      ONCLUSIVEML_SERVING_NUM_USERS: 2 # numbers of users in load test
      ONCLUSIVEML_SERVING_SPAWN_RATE: 2 # per second spawn rate of clients until `num_users` is reached
      ONCLUSIVEML_SERVING_HOST: http://serve:8000 # base url of the host
      ONCLUSIVEML_SERVING_RESET_STATS: No
      ONCLUSIVEML_SERVING_RUN_TIME: 45s
      ONCLUSIVEML_SERVING_LOGLEVEL: INFO
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
    profiles: [load]
    hostname: onclusiveml
    networks:
      - onclusive-net
    depends_on:
      serve:
        condition: service_healthy

  # utility service: uploading the relevant test results to the model registry
  serve-upload-results:
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
      - type: bind
        source: serve/src
        target: /projects/ner/serve/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [python, -m, src.upload]
    profiles: [serve]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      NEPTUNE_CLIENT_MODE: async
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
      NEPTUNE_MODEL_VERSION_ID: NER-COMPILED-133
      ONCLUSIVEML_TRACKING_BACKEND_USE_S3_BACKEND: yes
      ONCLUSIVEML_TRACKING_LOGGER_LEVEL: 10
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-133
      DOCKER_IMAGE_NAME: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve
      DOCKER_IMAGE_TAG: ${IMAGE_TAG}
      DOCKER_COMPOSE_ENVIRONMENT: ${ENVIRONMENT}
      GITHUB_REPOSITORY: development-repository
      GITHUB_ACTOR: development-actor
      GITHUB_ENV: development-env
      GITHUB_WORKFLOW: development-workflow
      GITHUB_JOB: development-job
      GITHUB_REF: development-ref
      GITHUB_BASE_REF: development-base-ref
      GITHUB_HEAD_REF: development-head-ref
      GITHUB_SHA: development-sha
      GITHUB_EVENT_NAME: development-event-name
      GITHUB_RUN_ID: development-run-id
      GITHUB_RUN_NUMBER: development-run-number
      RUNNER_ARCH: development-arch
      RUNNER_NAME: development-name
      RUNNER_OS: development-os
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # BACKFILL
  # =============================================

  backfill:
    build:
      context: ../../
      dockerfile: projects/ner/backfill/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: backfill
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v24.1.6}
    volumes:
      - type: bind
        source: backfill/src
        target: /projects/ner/backfill/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-backfill:${IMAGE_TAG}
    entrypoint: [python, -m, src.backfill.__main__]
    profiles: [backfill]
    network_mode: service:taskmanager
    environment:
      HOST: internal.api.ml.stage.onclusive.com
      NAMESPACE: ner
      VERSION: 1
      API_KEY: ${INTERNAL_ML_ENDPOINT_API_KEY}
      SECURE: true
      JOB_NAME: ner-backfill
      RUNNER: PortableRunner
      STREAMING: true
      ARTIFACT_ENDPOINT: jobserver:8098
      JOB_ENDPOINT: jobserver:8099
      ENVIRONMENT_TYPE: LOOPBACK
      SOURCE_TOPIC: beam-input
      TARGET_TOPIC: beam-output
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: notification_consumer_group
      AUTO_OFFSET_RESET: earliest
    depends_on:
      - jobserver
      - kafka
      - zookeeper

  backfill-debug:
    build:
      context: ../../
      dockerfile: projects/ner/backfill/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: backfill
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v24.1.6}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-backfill:${IMAGE_TAG}
    command: [python, -m, debugpy, --listen, 0.0.0.0:5678, --wait-for-client, -m, src.backfill.__main__]
    ports:
      - 5678:5678
    profiles: [debug]
    environment:
      HOST: internal.api.ml.stage.onclusive.com
      NAMESPACE: ner
      VERSION: 1
      API_KEY: ${INTERNAL_ML_ENDPOINT_API_KEY}
      SECURE: true
      JOB_NAME: ner-backfill
      RUNNER: PortableRunner
      STREAMING: true
      ARTIFACT_ENDPOINT: jobserver:8098
      JOB_ENDPOINT: jobserver:8099
      ENVIRONMENT_TYPE: LOOPBACK
      SOURCE_TOPIC: beam-input
      TARGET_TOPIC: beam-output
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: notification_consumer_group
      AUTO_OFFSET_RESET: earliest
    depends_on:
      - jobserver
      - kafka
      - zookeeper

  backfill-unit:
    volumes:
      - type: bind
        source: backfill
        target: /projects/ner/backfill
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-backfill:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no, -s]
    profiles: [unit]
    environment:
      HOST: test.onclusive.com
      NAMESPACE: ner
      VERSION: 1
      API_KEY: test
      SECURE: true
      JOB_NAME: ner-backfill
      RUNNER: PortableRunner
      STREAMING: true
      ARTIFACT_ENDPOINT: jobserver:8098
      JOB_ENDPOINT: jobserver:8099
      ENVIRONMENT_TYPE: LOOPBACK
      SOURCE_TOPIC: test-input
      TARGET_TOPIC: test-output
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: notification_consumer_group
      AUTO_OFFSET_RESET: earliest
    hostname: onclusive-ml
    networks: [onclusive-net]

  jobmanager:
    image: apache/flink:1.16-scala_2.12-java11
    command: [jobmanager]
    ports:
      - 8081:8081
    profiles: [backfill, debug]
    networks: [onclusive-net]
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: jobmanager
        parallelism.default: 1

  taskmanager:
    image: apache/flink:1.16-scala_2.12-java11
    scale: 1
    depends_on:
      - jobmanager
    command: [taskmanager]
    ports:
      - 8100-8200:8100-8200
    profiles: [backfill, debug]
    networks: [onclusive-net]
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 1
    volumes:
      - backfill-volume:/tmp/beam-artifact-staging

  jobserver:
    image: apache/beam_flink1.16_job_server:2.49.0
    command:
      - --flink-master=jobmanager:8081
    ports:
      - 8097:8097
      - 8098:8098
      - 8099:8099
    depends_on:
      - jobmanager
    profiles: [backfill, debug]
    networks: [onclusive-net]
    volumes:
      - backfill-volume:/tmp/beam-artifact-staging

  zookeeper:
    image: confluentinc/cp-zookeeper
    profiles: [backfill, debug]
    networks: [onclusive-net]
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2

  kafka:
    image: confluentinc/cp-kafka:6.1.13
    profiles: [backfill, debug]
    networks: [onclusive-net]
    ports:
      - 9092:9092
      - 9094:9094
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      LAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CREATE_TOPICS: beam-output:1:1,beam-input:1:1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      TOPIC_AUTO_CREATE: true

  kafka-ui:
    image: provectuslabs/kafka-ui
    profiles: [backfill, debug]
    ports:
      - 9000:9000
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

volumes :
  backfill-volume:

networks:
  onclusive-net:
