---
version : '3.9'

services:
  # =============================================
  # SERVE
  # =============================================

  # serving image
  serve:
    volumes:
      - type: bind
        source: serve/src
        target: /projects/entity-linking/serve/src
    build:
      context: ../../
      dockerfile: projects/entity-linking/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: entity-linking
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG}
    command: [python, -m, src.serve.__main__]
    environment:
      ONCLUSIVEML_SERVING_LOGCONFIG_SERVICE: entity-linking-serve
      ONCLUSIVEML_SERVING_LOGCONFIG_LEVEL: 10
      ONCLUSIVEML_SERVING_LOGCONFIG_JSON_FORMAT: false
      ONCLUSIVEML_SERVING_UVICORN_APP: src.serve.__main__:model_server
      ONCLUSIVEML_SERVING_UVICORN_RELOAD: true
      ONCLUSIVEML_SERVING_UVICORN_RELOAD_DIRS: src/serve/
      ONCLUSIVEML_SERVING_UVICORN_PORT: 9000
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    profiles: [serve, functional]
    ports:
      - 9000:9000
    depends_on:
      entity-fishing-backend:
        condition: service_healthy
      ner-serve:
        condition: service_healthy
    hostname: onclusiveml
    networks:
      - onclusive-net
    healthcheck:
      test: [CMD, curl, -f, http://serve:9000/entity-linking/v1/ready]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  serve-debug:
    build:
      context: ../../
      dockerfile: projects/entity-linking/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: entity-linking
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG}
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      ONCLUSIVEML_SERVING_LOGCONFIG_SERVICE: entity-linking-serve
      ONCLUSIVEML_SERVING_LOGCONFIG_LEVEL: 10
      ONCLUSIVEML_SERVING_LOGCONFIG_JSON_FORMAT: false
      ONCLUSIVEML_SERVING_UVICORN_APP: src.serve.__main__:model_server
      ONCLUSIVEML_SERVING_UVICORN_RELOAD: true
      ONCLUSIVEML_SERVING_UVICORN_RELOAD_DIRS: src/serve/
      ONCLUSIVEML_SERVING_UVICORN_PORT: 9000
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    user: root
    profiles: [serve, debug]
    command:
      - /bin/sh
      - -c
      - |
        python -m src.download.__main__
        python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m src.serve.__main__
    ports:
      - 5678:5678
      - 9000:9000
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /opt/entity-fishing/data/db
      - type: bind
        source: serve/src
        target: /projects/entity-linking/serve/src
    hostname: onclusiveml
    networks:
      - onclusive-net

  serve-download-model:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG}
    command: [python, -m, src.download.__main__]
    profiles: [serve]
    ports:
      - 9000:9000
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /opt/entity-fishing/data/db
      - type: bind
        source: serve/src
        target: /projects/entity-linking/serve/src
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
      ONCLUSIVEML_SERVING_KNOWLEDGE_BASES: '["kb", "en", "fr"]'
    depends_on:
      - ner-serve-download-model
    hostname: onclusiveml
    networks:
      - onclusive-net

  # unit tests
  serve-unit:
    volumes:
      - type: bind
        source: serve/src
        target: /projects/entity-linking/serve/src
      - type: bind
        source: serve/tests
        target: /projects/entity-linking/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    environment:
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    hostname: onclusiveml
    networks:
      - onclusive-net

  # integration tests
  serve-integration:
    volumes:
      - type: bind
        source: serve/src
        target: /projects/entity-linking/serve/src
      - type: bind
        source: serve/tests
        target: /projects/entity-linking/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG:-latest}
    command: [pytest, tests/integration, -ra, -vv, --capture=no]
    profiles: [integration]
    environment:
      ONCLUSIVEML_SERVING_UVICORN_PORT: 9000
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    hostname: onclusiveml
    depends_on:
      entity-fishing-backend:
        condition: service_healthy
      ner-serve:
        condition: service_healthy
    networks:
      - onclusive-net

  # functional tests
  serve-functional:
    volumes:
      - type: bind
        source: serve/src
        target: /projects/entity-linking/serve/src
      - type: bind
        source: serve/tests
        target: /projects/entity-linking/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG:-latest}
    command: [pytest, tests/functional, -ra, -vv, --capture=no]
    profiles: [functional]
    environment:
      ONCLUSIVEML_SERVING_UVICORN_PORT: 9000
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    hostname: onclusiveml
    depends_on:
      serve:
        condition: service_healthy
    networks:
      - onclusive-net

  # serving image
  ner-serve:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/ner/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [python, -m, src.serve.__main__]
    environment:
      ONCLUSIVEML_SERVING_UVICORN_APP: src.serve.__main__:model_server
      ONCLUSIVEML_SERVING_UVICORN_RELOAD: true
      ONCLUSIVEML_SERVING_UVICORN_RELOAD_DIRS: src/serve/
      ONCLUSIVEML_SERVING_UVICORN_PORT: 8000
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-38
      ONCLUSIVEML_SERVING_API_VERSION: v1
      ONCLUSIVEML_TRACKING_LOGGER_LEVEL: 20 # 10=DEBUG
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
    profiles: [serve, integration, functional, load, backfill, debug]
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
    ports:
      - 8000:8000
    hostname: onclusiveml
    networks:
      - onclusive-net
    healthcheck:
      test: [CMD, curl, -f, http://ner-serve:8000/ner/v1/ready]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  # ner serve download model
  ner-serve-download-model:
    build:
      context: ../../
      dockerfile: projects/ner/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/ner/serve/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [python, -m, src.download]
    profiles: [serve, backfill, debug]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      NEPTUNE_CLIENT_MODE: read-only
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
      NEPTUNE_MODEL_VERSION_ID: NER-COMPILED-38
      ONCLUSIVEML_TRACKING_BACKEND_USE_S3_BACKEND: yes
      ONCLUSIVEML_TRACKING_LOGGER_LEVEL: 20
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-38
      ONCLUSIVEML_SERVING_WAIT_SECONDS_AFTER_DOWNLOAD: 600 # 10 minutes
    hostname: onclusiveml
    networks: [onclusive-net]

  # entity fishing backend
  entity-fishing-backend:
    build:
      context: ../../
      dockerfile: apps/entity-fishing/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: entity-fishing
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-fishing-backend:${IMAGE_TAG:-latest}
    command: [./gradlew, --no-daemon, run, -x, compileJava, -x, processResources, -x, classes, -d]
    profiles: [serve, integration, functional, load, backfill, debug]
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /opt/entity-fishing/data/db
    ports:
      - 8090:8090
      - 8091:8091
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 10s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 15s
    environment:
      ENVIRONMENT: dev
    hostname: onclusiveml
    networks:
      - onclusive-net

  # =============================================
  # BACKFILL
  # =============================================

  backfill:
    build:
      context: ../../
      dockerfile: projects/entity-linking/backfill/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: entity-linking
        COMPONENT: backfill
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v24.1.6}
    volumes:
      - type: bind
        source: backfill/src
        target: /projects/entity-linking/backfill/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-backfill:${IMAGE_TAG}
    entrypoint: [python, -m, src.backfill.__main__]
    profiles: [backfill]
    network_mode: service:taskmanager
    environment:
      HOST: internal.api.ml.stage.onclusive.com
      NAMESPACE: entity-linking
      VERSION: 1
      API_KEY: ${INTERNAL_ML_ENDPOINT_API_KEY}
      SECURE: true
      JOB_NAME: entity-linking-backfill
      RUNNER: PortableRunner
      STREAMING: true
      ARTIFACT_ENDPOINT: jobserver:8098
      JOB_ENDPOINT: jobserver:8099
      ENVIRONMENT_TYPE: LOOPBACK
      SOURCE_TOPIC: beam-input
      TARGET_TOPIC: beam-output
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: notification_consumer_group
      AUTO_OFFSET_RESET: earliest
    depends_on:
      - jobserver
      - kafka
      - zookeeper

  backfill-unit:
    volumes:
      - type: bind
        source: backfill
        target: /projects/entity-linking/backfill
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-backfill:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no, -s]
    profiles: [unit]
    environment:
      HOST: test.onclusive.com
      NAMESPACE: entity-linking
      VERSION: 1
      API_KEY: test
      SECURE: true
      JOB_NAME: entity-linking-backfill
      RUNNER: PortableRunner
      STREAMING: true
      ARTIFACT_ENDPOINT: jobserver:8098
      JOB_ENDPOINT: jobserver:8099
      ENVIRONMENT_TYPE: LOOPBACK
      SOURCE_TOPIC: test-input
      TARGET_TOPIC: test-output
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: notification_consumer_group
      AUTO_OFFSET_RESET: earliest
    hostname: onclusive-ml
    networks: [onclusive-net]

  jobmanager:
    image: apache/flink:1.16-scala_2.12-java11
    command: [jobmanager]
    ports:
      - 8081:8081
    profiles: [backfill]
    networks: [onclusive-net]
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: jobmanager
        parallelism.default: 1

  taskmanager:
    image: apache/flink:1.16-scala_2.12-java11
    scale: 1
    depends_on:
      - jobmanager
    command: [taskmanager]
    ports:
      - 8100-8200:8100-8200
    profiles: [backfill]
    networks: [onclusive-net]
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 1
    volumes:
      - backfill-volume:/tmp/beam-artifact-staging

  jobserver:
    image: apache/beam_flink1.16_job_server:2.49.0
    command:
      - --flink-master=jobmanager:8081
    ports:
      - 8097:8097
      - 8098:8098
      - 8099:8099
    depends_on:
      - jobmanager
    profiles: [backfill]
    networks: [onclusive-net]
    volumes:
      - backfill-volume:/tmp/beam-artifact-staging

  zookeeper:
    image: confluentinc/cp-zookeeper
    profiles: [backfill]
    networks: [onclusive-net]
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2

  kafka:
    image: confluentinc/cp-kafka:6.1.13
    profiles: [backfill]
    networks: [onclusive-net]
    ports:
      - 9092:9092
      - 9094:9094
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      LAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CREATE_TOPICS: beam-output:1:1,beam-input:1:1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      TOPIC_AUTO_CREATE: true

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - 9000:9000
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

volumes :
  backfill-volume:

networks:
  onclusive-net:
