---
version : '3.9'

services:
  # =============================================
  # SERVE
  # =============================================

  # serving image
  serve:
    build:
      context: ../../
      dockerfile: projects/entity-linking/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: entity-linking
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG}
    command: [python, -m, src.serve.__main__]
    profiles: [serve, functional]
    ports:
      - 9000:9000
    environment:
      ONCLUSIVEML_SERVING_UVICORN_APP: src.serve.__main__:model_server
      ONCLUSIVEML_SERVING_UVICORN_PORT: 9000
      ONCLUSIVEML_SERVING_LOGCONFIG_SERVICE: entity-linking-serve
      ONCLUSIVEML_SERVING_LOGCONFIG_LEVEL: 20
      ONCLUSIVEML_SERVING_LOGCONFIG_JSON_FORMAT: no
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    depends_on:
      entity-fishing-backend:
        condition: service_healthy
      ner-serve:
        condition: service_healthy
    hostname: onclusiveml
    networks:
      - onclusive-net
    healthcheck:
      test: [CMD, curl, -f, http://serve:9000/entity-linking/v1/ready]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  serve-download-model:
    build:
      context: ../../
      dockerfile: projects/entity-linking/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: entity-linking
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG}
    command: [python, -m, src.download.__main__]
    profiles: [serve]
    volumes:
      - entity-fishing-volume:/opt/entity-fishing/data/db
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
      ONCLUSIVEML_SERVING_SOURCE_BUCKET: onclusive-model-store-prod
      ONCLUSIVEML_SERVING_KNOWLEDGE_BASES: '["kb", "en", "fr"]'
    depends_on:
      depends_on:
        - ner-serve-download-model
    hostname: onclusiveml
    networks:
      - onclusive-net

  # unit tests
  serve-unit:
    build:
      context: ../../
      dockerfile: projects/entity-linking/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: entity-linking
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    environment:
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    hostname: onclusiveml
    networks:
      - onclusive-net

  # integration tests
  serve-integration:
    build:
      context: ../../
      dockerfile: projects/entity-linking/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: entity-linking
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG:-latest}
    command: [pytest, tests/integration, -ra, -vv, --capture=no]
    profiles: [integration]
    environment:
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-39
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    hostname: onclusiveml
    depends_on:
      entity-fishing-backend:
        condition: service_healthy
      ner-serve:
        condition: service_healthy
    networks:
      - onclusive-net

  # functional tests
  serve-functional:
    build:
      context: ../../
      dockerfile: projects/entity-linking/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: entity-linking
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-linking-serve:${IMAGE_TAG:-latest}
    command: [pytest, tests/functional, -ra, -vv, --capture=no]
    profiles: [functional]
    environment:
      ONCLUSIVEML_SERVING_UVICORN_PORT: 9000
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-39
      ONCLUSIVEML_SERVING_ENTITY_FISHING_ENDPOINT: http://entity-fishing-backend:8090/service/disambiguate
      ONCLUSIVEML_SERVING_ENTITY_RECOGNITION_ENDPOINT: http://ner-serve:8000/ner/v1/predict
      ONCLUSIVEML_SERVING_INTERNAL_ML_API_KEY: ''
    hostname: onclusiveml
    depends_on:
      serve:
        condition: service_healthy
    networks:
      - onclusive-net

  # ner serve
  ner-serve:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/ner/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [python, -m, src.serve.__main__]
    environment:
      ONCLUSIVEML_SERVING_UVICORN_APP: src.serve.__main__:model_server
      ONCLUSIVEML_SERVING_UVICORN_PORT: 8000
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-39
      ONCLUSIVEML_SERVING_API_VERSION: v1
      ONCLUSIVEML_TRACKING_LOGGER_LEVEL: 20 # 10=DEBUG
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
    profiles: [serve, integration, functional, load]
    volumes:
      - ner-volume:/projects/ner/serve/models
    ports:
      - 8000:8000
    hostname: onclusiveml
    networks:
      - onclusive-net
    healthcheck:
      test: [CMD, curl, -f, http://ner-serve:8000/ner/v1/ready]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  # ner serve download model
  ner-serve-download-model:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/ner/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: ner
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    volumes:
      - ner-volume:/projects/ner/serve/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/ner-serve:${IMAGE_TAG}
    command: [python, -m, src.download, ;, tail, -f, /dev/null]
    profiles: [serve]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      NEPTUNE_CLIENT_MODE: read-only
      NEPTUNE_PROJECT: onclusive/ner
      NEPTUNE_MODEL_ID: NER-COMPILED
      NEPTUNE_MODEL_VERSION_ID: NER-COMPILED-39
      ONCLUSIVEML_TRACKING_BACKEND_USE_S3_BACKEND: yes
      ONCLUSIVEML_TRACKING_BACKEND_S3_BACKEND_BUCKET: onclusive-model-store-stage
      ONCLUSIVEML_TRACKING_LOGGER_LEVEL: 20
      ONCLUSIVEML_SERVING_MODEL_DIRECTORY: models/NER-COMPILED-39
    hostname: onclusiveml
    networks: [onclusive-net]

  # entity fishing backend
  entity-fishing-backend:
    build:
      context: ../../
      dockerfile: apps/entity-fishing/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: entity-fishing
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/entity-fishing-backend:${IMAGE_TAG:-latest}
    restart: on-failure
    command: [./gradlew, --no-daemon, run, -x, compileJava, -x, processResources, -x, classes, -d]
    profiles: [serve, integration, functional, load]
    volumes:
      - entity-fishing-volume:/opt/entity-fishing/data/db
    ports:
      - 8090:8090
      - 8091:8091
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 10s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 15s
    environment:
      ENVIRONMENT: stage
    hostname: onclusiveml
    networks:
      - onclusive-net

networks:
  onclusive-net:

volumes :
  entity-fishing-volume:
  ner-volume:
