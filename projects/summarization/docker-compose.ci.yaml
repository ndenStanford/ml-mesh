---
version : '3.9'

services:
  # =============================================
  # SERVE
  # =============================================

  # serving image
  serve:
    build:
      context: ../../
      dockerfile: projects/summarization/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: summarization
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/summarization-serve:${IMAGE_TAG:-latest}
    command: [python, -m, src.serve.__main__]
    profiles: [serve]
    ports:
      - 8888:8888
    environment:
      ONCLUSIVEML_SERVING_LOGCONFIG_SERVICE: summarization-serve
      ONCLUSIVEML_SERVING_LOGCONFIG_LEVEL: 10
      ONCLUSIVEML_SERVING_LOGCONFIG_JSON_FORMAT: false
      ENVIRONMENT: dev
      ONCLUSIVEML_SERVING_UVICORN_APP: src.serve.__main__:model_server
      ONCLUSIVEML_SERVING_UVICORN_RELOAD: true
      ONCLUSIVEML_SERVING_UVICORN_RELOAD_DIRS: src/serve/
      ONCLUSIVEML_SERVING_UVICORN_WORKERS: 1
      ONCLUSIVEML_SERVING_UVICORN_PORT: 8888
      ONCLUSIVEML_SERVING_API_VERSION: v1
      PROMETHEUS_MULTIPROC_DIR: /tmp
      ONCLUSIVEML_SERVING_BETTERSTACK_ENABLE: true
      ONCLUSIVEML_SERVING_BETTERSTACK_API_TOKEN: ${ONCLUSIVEML_SERVING_BETTERSTACK_API_TOKEN}
      DOCS_URL: /summarization/docs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      INTERNAL_ML_ENDPOINT_API_KEY: 1234
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    depends_on:
      prompt-backend:
        condition: service_healthy
    hostname: onclusiveml
    networks:
      - onclusive-net

  # unit tests
  serve-unit:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/summarization-serve:${IMAGE_TAG:-latest}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    environment:
      ENVIRONMENT: dev
      DOCS_URL: summarization/docs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      INTERNAL_ML_ENDPOINT_API_KEY: 1234
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    hostname: onclusiveml
    networks:
      - onclusive-net

  # integration tests
  serve-integration:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/summarization-serve:${IMAGE_TAG:-latest}
    command: [pytest, tests/integration, -ra, -vv, --capture=no]
    profiles: [integration]
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      INTERNAL_ML_ENDPOINT_API_KEY: 1234
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    depends_on:
      prompt-backend:
        condition: service_healthy
    hostname: onclusiveml
    networks:
      - onclusive-net

  prompt-backend:
    build:
      context: ../../
      dockerfile: apps/prompt/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-backend:${IMAGE_TAG:-latest}
    command: [uvicorn, src.app:app, --host, 0.0.0.0, --port, '4000', --reload, --log-level, debug]
    profiles: [serve, integration]
    ports:
      - 4000:4000
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY:-none}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-anything}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-anything}
      REDIS_CONNECTION_STRING: redis://redisdb:6379
      DB_HOST: http://dynamodb:8000
      BETTERSTACK_KEY: ${BETTERSTACK_KEY:-none}
      GITHUB_APP_ID: ${GITHUB_APP_ID:-}
      GITHUB_APP_PRIVATE_KEY: ${GITHUB_APP_PRIVATE_KEY:-}
    depends_on:
      dynamodb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 3s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net

  dynamodb:
    command: -jar DynamoDBLocal.jar -sharedDb
    image: amazon/dynamodb-local:latest
    restart: always
    expose:
      - 8000
    ports:
      - 8000:8000
    profiles: [serve, integration]
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 3s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net

  redisdb:
    image: redis:7.0
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    profiles: [serve, integration]
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 3s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net

networks:
  onclusive-net:
