---

services:

  # =============================================
  # TRAIN
  # =============================================

  train:
    build:
      context: ../../
      dockerfile: projects/iptc/train/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: train
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    volumes:
      - type: bind
        source: train
        target: /projects/iptc/train
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-train:${IMAGE_TAG:-latest}
    command: [python, -m, src.train_model]
    profiles: [train]
    environment:
      TRAINED_PROJECT: ${TRAINED_PROJECT}
      TRAINED_MODEL: ${TRAINED_MODEL}
      NEPTUNE_PROJECT: ${NEPTUNE_PROJECT}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: train/config/dev.env
    hostname: onclusive-ml
    depends_on:
      prompt-backend:
        condition: service_healthy
    networks: [onclusive-net]

  train-debug:
    build:
      context: ../../
      dockerfile: projects/iptc/train/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: train
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-train:${IMAGE_TAG:-latest}
    command: [python, -m, debugpy, --listen, 0.0.0.0:5678, --wait-for-client, -m, src.train_model]
    ports:
      - 5678:5678
    profiles: [debug]
    environment:
      NEPTUNE_PROJECT: ${NEPTUNE_PROJECT}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: train/config/dev.env
    depends_on:
      prompt-backend:
        condition: service_healthy
    hostname: onclusive-ml
    networks: [onclusive-net]

  train-unit:
    volumes:
      - type: bind
        source: train
        target: /projects/iptc/train
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-train:${IMAGE_TAG:-latest}
    command: [python, -m, pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    environment:
      TRAINED_PROJECT: ${TRAINED_PROJECT}
      TRAINED_MODEL: ${TRAINED_MODEL}
      NEPTUNE_PROJECT: ${NEPTUNE_PROJECT}
      NEPTUNE_NAME: ${NEPTUNE_NAME}
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: train/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # REGISTER
  # =============================================

  register:
    build:
      context: ../../
      dockerfile: projects/iptc/register/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: register
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    volumes:
      - type: bind
        source: register/src
        target: /projects/iptc/register/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-register:${IMAGE_TAG:-latest}
    command: [python, -m, src.register_features]
    profiles: [register]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      REGISTER_FEATURES: ${REGISTER_FEATURES}
    env_file: register/config/dev.env
    depends_on:
      prompt-backend:
        condition: service_healthy
    hostname: onclusive-ml
    networks: [onclusive-net]

  register-debug:
    build:
      context: ../../
      dockerfile: projects/iptc/register/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: register
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-register:${IMAGE_TAG:-latest}
    command: [python, -m, debugpy, --listen, 0.0.0.0:5678, --wait-for-client, -m, src.register_features]
    ports:
      - 5678:5678
    profiles: [debug]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: register/config/dev.env
    depends_on:
      prompt-backend:
        condition: service_healthy
    hostname: onclusive-ml
    networks: [onclusive-net]

  register-unit:
    volumes:
      - type: bind
        source: register/
        target: /projects/iptc/register/
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-register:${IMAGE_TAG}
    command: [python, -m, pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [register, unit]
    env_file: register/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  prompt-backend:
    build:
      context: ../../
      dockerfile: apps/prompt/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-backend:${IMAGE_TAG}
    command: [python, -m, uvicorn, src.app:app, --host, 0.0.0.0, --port, '4000', --reload, --log-level, debug]
    profiles: [register, train, serve, integration, functional, debug]
    ports:
      - 4000:4000
    volumes:
      - type: bind
        source: ~/.aws/
        target: /apps/prompt/backend/.aws/
    environment:
      ENVIRONMENT: dev
      OPENAI_API_KEY: ${OPENAI_API_KEY:-none}
      PROMPT_REGISTRY_APP_ID: ${PROMPT_REGISTRY_APP_ID}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${PROMPT_REGISTRY_APP_PRIVATE_KEY}
      DOCS_URL: /docs
      REDIS_CONNECTION_STRING: redis://redisdb:6379
      DYNAMODB_HOST: http://dynamodb:8000
      BETTERSTACK_KEY: ${BETTERSTACK_KEY:-none}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      dynamodb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 10s || exit 1]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 50s
    networks:
      - onclusive-net

  dynamodb:
    command: -jar DynamoDBLocal.jar -sharedDb
    image: amazon/dynamodb-local:latest
    restart: always
    expose:
      - 8000
    ports:
      - 8000:8000
    profiles: [register, train, serve, integration, functional, debug]
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 6s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net

  redisdb:
    image: redis:7.0
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    profiles: [register, train, serve, integration, functional, debug]
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 3s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net


  # =============================================
  # COMPILE
  # =============================================

  compile:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - type: bind
        source: compile/src
        target: /projects/iptc/compile/src
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/compile/models
    build:
      context: ../../
      dockerfile: projects/iptc/compile/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: compile
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG:-latest}
    command: [python, -m, src.compile_model]
    profiles: [register, compile, unit, integration, pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      UNCOMPILED_PROJECT: ${UNCOMPILED_PROJECT}
      UNCOMPILED_MODEL: ${UNCOMPILED_MODEL}
      UNCOMPILED_WITH_ID: ${UNCOMPILED_WITH_ID}
      COMPILED_PROJECT: ${COMPILED_PROJECT}
      COMPILED_MODEL: ${COMPILED_MODEL}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-debug:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/iptc/compile/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: compile
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG:-latest}
    command:
      - /bin/sh
      - -c
      - |
        python -m src.download_uncompiled_model
        python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m src.compile_model
    ports:
      - 5678:5678
    profiles: [debug]
    environment:
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-unit:
    volumes:
      - type: bind
        source: compile/src
        target: /projects/iptc/compile/src
      - type: bind
        source: compile/tests
        target: /projects/iptc/compile/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [python, -m, pytest, tests/unit, -ra, -vv, --capture=no, -s]
    profiles: [unit]
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-download-model:
    volumes:
      - type: bind
        source: compile/src
        target: /projects/iptc/compile/src
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/compile/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [python, -m, src.download_uncompiled_model]
    profiles: [pipeline]
    environment:
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      UNCOMPILED_PROJECT: ${UNCOMPILED_PROJECT}
      UNCOMPILED_MODEL: ${UNCOMPILED_MODEL}
      UNCOMPILED_WITH_ID: ${UNCOMPILED_WITH_ID}
      COMPILED_PROJECT: ${COMPILED_PROJECT}
      COMPILED_MODEL: ${COMPILED_MODEL}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-validate-model:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - type: bind
        source: compile/src
        target: /projects/iptc/compile/src
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/compile/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [python, -m, pytest, src/test_compiled_model, -ra, -vvv, --full-trace, --tb=long, --capture=no, -s]
    profiles: [pipeline]
    environment:
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      UNCOMPILED_PROJECT: ${UNCOMPILED_PROJECT}
      UNCOMPILED_MODEL: ${UNCOMPILED_MODEL}
      UNCOMPILED_WITH_ID: ${UNCOMPILED_WITH_ID}
      COMPILED_PROJECT: ${COMPILED_PROJECT}
      COMPILED_MODEL: ${COMPILED_MODEL}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-upload-model:
    volumes:
      - type: bind
        source: compile/src
        target: /projects/iptc/compile/src
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/compile/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [python, -m, src.upload_compiled_model]
    profiles: [pipeline]
    environment:
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      UNCOMPILED_PROJECT: ${UNCOMPILED_PROJECT}
      UNCOMPILED_MODEL: ${UNCOMPILED_MODEL}
      UNCOMPILED_WITH_ID: ${UNCOMPILED_WITH_ID}
      COMPILED_PROJECT: ${COMPILED_PROJECT}
      COMPILED_MODEL: ${COMPILED_MODEL}
    env_file: compile/config/dev.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # SERVE
  # =============================================

  # serving image
  serve:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/iptc/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [python, -m, src.serve.__main__]
    env_file: serve/config/dev.env
    profiles: [serve, functional, load]
    ports:
      - 8000:8000
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/serve/models
      - type: bind
        source: serve/src
        target: /projects/iptc/serve/src
    hostname: onclusiveml
    networks:
      - onclusive-net
    healthcheck:
      test: [CMD, curl, -f, http://serve:8000/iptc-00000000/v1/ready]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  # utility service: downloading the compiled model artifact that will be served
  serve-download-model:
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/serve/models
      - type: bind
        source: serve/src
        target: /projects/iptc/serve/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [python, -m, src.download]
    profiles: [serve, functional, load]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
    env_file: serve/config/dev.env
    hostname: onclusiveml
    networks: [onclusive-net]

  serve-debug:
    devices:
      - /dev/neuron0:/dev/neuron0
    build:
      context: ../../
      dockerfile: projects/iptc/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      ONCLUSIVEML_NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
    env_file: serve/config/dev.env
    profiles: [debug]
    command:
      - /bin/sh
      - -c
      - |
        python -m src.download
        python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m src.serve.__main__
    ports:
      - 5678:5678
      - 8000:8000
    hostname: onclusiveml
    networks:
      - onclusive-net

  # unit tests
  # - do NOT include model artifact
  # - do NOT include REST model server process
  serve-unit:
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/serve/models
      - type: bind
        source: serve/src
        target: /projects/iptc/serve/src
      - type: bind
        source: serve/tests
        target: /projects/iptc/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [python, -m, pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    env_file: serve/config/dev.env
    hostname: onclusiveml
    networks:
      - onclusive-net

  # integration tests
  # - include model artifact
  # - do NOT include REST model server process
  serve-integration:
    devices:
      - /dev/neuron0:/dev/neuron0 # needs to be different from the `serve` service device
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/serve/models
      - type: bind
        source: serve/src
        target: /projects/iptc/serve/src
      - type: bind
        source: serve/tests
        target: /projects/iptc/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [python, -m, pytest, tests/integration, -ra, -vv, --capture=no, -s]
    env_file: serve/config/dev.env
    profiles: [integration]
    hostname: onclusiveml
    networks:
      - onclusive-net

  # functional tests
  # - include model artifact
  # - include REST model server process
  serve-functional:
    volumes:
      - type: bind
        source: ${HOME}/data
        target: /projects/iptc/serve/models
      - type: bind
        source: serve/src
        target: /projects/iptc/serve/src
      - type: bind
        source: serve/tests
        target: /projects/iptc/serve/tests
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [python, -m, pytest, tests/functional, -ra, -vv, --capture=no]
    env_file: serve/config/dev.env
    profiles: [functional]
    hostname: onclusiveml
    networks:
      - onclusive-net
    depends_on:
      serve:
        condition: service_healthy

networks:
  onclusive-net:
