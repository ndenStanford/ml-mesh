---
version : '3.9'

services:

  # =============================================
  # INGEST
  # =============================================

  ingest:
    build:
      context: ../../
      dockerfile: projects/iptc/ingest/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      cache_to:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-ingest,mode=max
      cache_from:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-ingest
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: ingest
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    volumes:
      - type: bind
        source: ingest/src
        target: /home/projects/iptc/ingest/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-ingest:${IMAGE_TAG}
    command: [python, -m, src.ingest]
    profiles: [ingest]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: ingest/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  ingest-unit:
    volumes:
      - type: bind
        source: ingest/
        target: /home/projects/iptc/ingest/
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-ingest:${IMAGE_TAG}
    command: [python, -m, pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: ingest/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # TRAIN
  # =============================================

  train:
    build:
      context: ../../
      dockerfile: projects/iptc/train/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      cache_to:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-train,mode=max
      cache_from:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-train
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: train
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-train:${IMAGE_TAG}
    command: [python, -m, src.train_model]
    profiles: [train]
    environment:
      TRAINED_PROJECT: ${TRAINED_PROJECT}
      TRAINED_MODEL: ${TRAINED_MODEL}
      NEPTUNE_PROJECT: ${NEPTUNE_PROJECT}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: train/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  train-unit:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-train:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    environment:
      TRAINED_PROJECT: ${TRAINED_PROJECT}
      TRAINED_MODEL: ${TRAINED_MODEL}
      NEPTUNE_PROJECT: ${NEPTUNE_PROJECT}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # REGISTER
  # =============================================

  register:
    build:
      context: ../../
      dockerfile: projects/iptc/register/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      cache_to:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-register,mode=max
      cache_from:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-register
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: register
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    volumes:
      - type: bind
        source: register/src
        target: /projects/iptc/register/src
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-register:${IMAGE_TAG:-latest}
    command: [python, -m, src.register_features]
    profiles: [register]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      REGISTER_FEATURES: ${REGISTER_FEATURES}
    env_file: register/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  register-unit:
    volumes:
      - type: bind
        source: register/
        target: /projects/iptc/register/
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-register:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [register, unit]
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # COMPILE
  # =============================================

  compile:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - compile-vol:/projects/iptc/compile/outputs # must be same as `IO_OUTPATH` env var
    build:
      context: ../../
      dockerfile: projects/iptc/compile/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      cache_to:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-compile,mode=max
      cache_from:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-compile
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: compile
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.1} #should have been v23.8.4?
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [python, -m, src.compile_model]
    profiles: [compile, unit, integration, pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      UNCOMPILED_PROJECT: ${UNCOMPILED_PROJECT}
      UNCOMPILED_MODEL: ${UNCOMPILED_MODEL}
      UNCOMPILED_WITH_ID: ${UNCOMPILED_WITH_ID}
      COMPILED_PROJECT: ${COMPILED_PROJECT}
      COMPILED_MODEL: ${COMPILED_MODEL}
    env_file: compile/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-unit:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-download-model:
    volumes:
      - compile-vol:/projects/iptc/compile/outputs # must be same as `IO_OUTPATH` env var
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [python, -m, src.download_uncompiled_model]
    profiles: [pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      UNCOMPILED_PROJECT: ${UNCOMPILED_PROJECT}
      UNCOMPILED_MODEL: ${UNCOMPILED_MODEL}
      UNCOMPILED_WITH_ID: ${UNCOMPILED_WITH_ID}
      COMPILED_PROJECT: ${COMPILED_PROJECT}
      COMPILED_MODEL: ${COMPILED_MODEL}
    env_file: compile/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-validate-model:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - compile-vol:/projects/iptc/compile/outputs # must be same as `IO_OUTPATH` env var
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [python, -m, pytest, src/test_compiled_model, -ra, -vvv, --full-trace, --tb=long, --capture=no]
    profiles: [pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      UNCOMPILED_PROJECT: ${UNCOMPILED_PROJECT}
      UNCOMPILED_MODEL: ${UNCOMPILED_MODEL}
      UNCOMPILED_WITH_ID: ${UNCOMPILED_WITH_ID}
      COMPILED_PROJECT: ${COMPILED_PROJECT}
      COMPILED_MODEL: ${COMPILED_MODEL}
    env_file: compile/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  compile-upload-model:
    volumes:
      - compile-vol:/projects/iptc/compile/outputs # must be same as `IO_OUTPATH` env var
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-compile:${IMAGE_TAG}
    command: [python, -m, src.upload_compiled_model]
    profiles: [pipeline]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}
      GITHUB_ACTOR: ${GITHUB_ACTOR}
      GITHUB_ENV: ${GITHUB_ENV}
      GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}
      GITHUB_JOB: ${GITHUB_JOB}
      GITHUB_REF: ${GITHUB_REF}
      GITHUB_BASE_REF: ${GITHUB_BASE_REF}
      GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}
      GITHUB_SHA: ${GITHUB_SHA}
      GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}
      GITHUB_RUN_ID: ${GITHUB_RUN_ID}
      GITHUB_RUN_NUMBER: ${GITHUB_RUN_NUMBER}
      RUNNER_ARCH: ${RUNNER_ARCH}
      RUNNER_NAME: ${RUNNER_NAME}
      RUNNER_OS: ${RUNNER_OS}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      UNCOMPILED_PROJECT: ${UNCOMPILED_PROJECT}
      UNCOMPILED_MODEL: ${UNCOMPILED_MODEL}
      UNCOMPILED_WITH_ID: ${UNCOMPILED_WITH_ID}
      COMPILED_PROJECT: ${COMPILED_PROJECT}
      COMPILED_MODEL: ${COMPILED_MODEL}
    env_file: compile/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # SERVE
  # =============================================

  # serving image
  serve:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - serve-vol:/projects/iptc/serve/models
    build:
      context: ../../
      dockerfile: projects/iptc/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      cache_to:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-serve,mode=max
      cache_from:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=iptc-serve
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: iptc
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [python, -m, src.serve.__main__]
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    profiles: [serve, functional, load]
    ports:
      - 8000:8000
    hostname: onclusiveml
    networks:
      - onclusive-net
    healthcheck:
      test: [CMD, curl, -f, http://serve:8000/iptc-00000000/v1/ready]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  # utility service: downloading the compiled model artifact that will be served
  serve-download-model:
    volumes:
      - serve-vol:/projects/iptc/serve/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [python, -m, src.download]
    profiles: [serve, integration, functional, load]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      NEPTUNE_CLIENT_MODE: read-only
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    hostname: onclusiveml
    networks: [onclusive-net]

  # unit tests
  # - do NOT include model artifact
  # - do NOT include REST model server process
  serve-unit:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    hostname: onclusiveml
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    networks:
      - onclusive-net

  # integration tests
  # - include model artifact
  # - do NOT include REST model server process
  serve-integration:
    devices:
      - /dev/neuron0:/dev/neuron0
    volumes:
      - serve-vol:/projects/iptc/serve/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [pytest, tests/integration, -ra, -vv, --capture=no]
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    profiles: [integration]
    hostname: onclusiveml
    networks:
      - onclusive-net

  # functional tests
  # - include model artifact
  # - include REST model server process
  serve-functional:
    volumes:
      - serve-vol:/projects/iptc/serve/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [pytest, tests/functional, -ra, -vv, --capture=no]
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    profiles: [functional]
    hostname: onclusiveml
    networks:
      - onclusive-net
    depends_on:
      serve:
        condition: service_healthy

  # load tests
  # - include model artifact
  # - include REST model server process
  serve-load:
    volumes:
      - serve-vol:/projects/iptc/serve/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [pytest, tests/load, -ra, -vv, --capture=no]
    environment:
      # load test params
      ONCLUSIVEML_SERVING_NUM_USERS: 2 # numbers of users in load test
      ONCLUSIVEML_SERVING_SPAWN_RATE: 2 # per second spawn rate of clients until `num_users` is reached
      ONCLUSIVEML_SERVING_HOST: http://serve:8000 # base url of the host
      ONCLUSIVEML_SERVING_RESET_STATS: No
      ONCLUSIVEML_SERVING_RUN_TIME: 45
      ONCLUSIVEML_SERVING_LOGLEVEL: INFO
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    profiles: [load]
    hostname: onclusiveml
    networks:
      - onclusive-net
    depends_on:
      serve:
        condition: service_healthy

  # utility service: uploading the relevant test results to the model registry
  serve-upload-results:
    volumes:
      - serve-vol:/projects/iptc/serve/models
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve:${IMAGE_TAG}
    command: [python, -m, src.upload]
    profiles: [serve]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      NEPTUNE_CLIENT_MODE: async
      DOCKER_IMAGE_NAME: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/iptc-serve
      DOCKER_IMAGE_TAG: ${IMAGE_TAG}
      DOCKER_COMPOSE_ENVIRONMENT: ${ENVIRONMENT}
      GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}
      GITHUB_ACTOR: ${GITHUB_ACTOR}
      GITHUB_ENV: ${GITHUB_ENV}
      GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}
      GITHUB_JOB: ${GITHUB_JOB}
      GITHUB_REF: ${GITHUB_REF}
      GITHUB_BASE_REF: ${GITHUB_BASE_REF}
      GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}
      GITHUB_SHA: ${GITHUB_SHA}
      GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}
      GITHUB_RUN_ID: ${GITHUB_RUN_ID}
      GITHUB_RUN_NUMBER: ${GITHUB_RUN_NUMBER}
      RUNNER_ARCH: ${RUNNER_ARCH}
      RUNNER_NAME: ${RUNNER_NAME}
      RUNNER_OS: ${RUNNER_OS}
    env_file: serve/config/${DEPLOYMENT:-prod}.env
    hostname: onclusive-ml
    networks: [onclusive-net]

networks:
  onclusive-net:

volumes :
  compile-vol:
  serve-vol:
