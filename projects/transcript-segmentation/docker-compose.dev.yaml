---

services:
  # =============================================
  # SERVE
  # =============================================

  # serving image
  serve:
    volumes:
      - type: bind
        source: serve
        target: /projects/transcript-segmentation/serve
    build:
      context: ../../
      dockerfile: projects/transcript-segmentation/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: transcript-segmentation
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/transcript-segmentation-serve:${IMAGE_TAG}
    command: [python, -m, src.serve.server]
    environment:
      ONCLUSIVEML_SERVING_BETTERSTACK_API_TOKEN: ${ONCLUSIVEML_SERVING_BETTERSTACK_API_TOKEN}
      INTERNAL_ML_ENDPOINT_API_KEY: ${INTERNAL_ML_ENDPOINT_API_KEY:-1234}
    env_file: serve/config/dev.env
    profiles: [serve, integration, functional]
    ports:
      - 8888:8888
    hostname: onclusiveml
    networks:
      - onclusive-net
    depends_on:
      prompt-backend:
        condition: service_healthy
    healthcheck:
      test: [CMD, curl, -f, http://serve:8888/transcript-segmentation/v1/ready]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  serve-debug:
    build:
      context: ../../
      dockerfile: projects/transcript-segmentation/serve/Dockerfile
      target: ${TARGET_BUILD_STAGE:-debugger}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        PROJECT: transcript-segmentation
        COMPONENT: serve
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/transcript-segmentation-serve:${IMAGE_TAG}
    environment:
      ONCLUSIVEML_SERVING_BETTERSTACK_API_TOKEN: ${ONCLUSIVEML_SERVING_BETTERSTACK_API_TOKEN}
      INTERNAL_ML_ENDPOINT_API_KEY: ${INTERNAL_ML_ENDPOINT_API_KEY:-1234}
    env_file: serve/config/dev.env
    profiles: [debug]
    command: [python, -m, debugpy, --listen, 0.0.0.0:5678, --wait-for-client, -m, src.serve.server]
    ports:
      - 5678:5678
      - 8888:8888
    hostname: onclusiveml
    networks:
      - onclusive-net
    depends_on:
      prompt-backend:
        condition: service_healthy

  # unit tests
  serve-unit:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/transcript-segmentation-serve:${IMAGE_TAG}
    command: [python, -m, pytest, tests/unit, -ra, -vv, --capture=no]
    volumes:
      - type: bind
        source: serve
        target: /projects/transcript-segmentation/serve
    profiles: [unit]
    env_file: serve/config/dev.env
    hostname: onclusiveml
    networks:
      - onclusive-net

  # integration tests
  serve-integration:
    volumes:
      - type: bind
        source: serve
        target: /projects/transcript-segmentation/serve
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/transcript-segmentation-serve:${IMAGE_TAG}
    command: [python, -m, pytest, tests/integration, -ra, -vv, --capture=no]
    profiles: [integration]
    environment:
      INTERNAL_ML_ENDPOINT_API_KEY: ${INTERNAL_ML_ENDPOINT_API_KEY:-1234}
    env_file: serve/config/dev.env
    depends_on:
      prompt-backend:
        condition: service_healthy
    hostname: onclusiveml
    networks:
      - onclusive-net

  # functional tests
  # - include REST model server process
  serve-functional:
    volumes:
      - type: bind
        source: serve
        target: /projects/transcript-segmentation/serve
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/transcript-segmentation-serve:${IMAGE_TAG}
    command: [python, -m, pytest, tests/functional, -ra, -vv, --capture=no]
    profiles: [functional]
    environment:
      INTERNAL_ML_ENDPOINT_API_KEY: ${INTERNAL_ML_ENDPOINT_API_KEY:-1234}
    env_file: serve/config/dev.env
    hostname: onclusiveml
    networks:
      - onclusive-net
    depends_on:
      serve:
        condition: service_healthy

  prompt-backend:
    build:
      context: ../../
      dockerfile: apps/prompt/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-backend:${IMAGE_TAG}
    command: [uvicorn, src.app:app, --host, 0.0.0.0, --port, '4000', --reload, --log-level, debug]
    profiles: [serve, integration, functional, debug]
    ports:
      - 4000:4000
    volumes:
      - type: bind
        source: ~/.aws/
        target: /apps/prompt/backend/.aws/
    environment:
      ENVIRONMENT: dev
      OPENAI_API_KEY: ${OPENAI_API_KEY:-none}
      PROMPT_REGISTRY_APP_ID: ${PROMPT_REGISTRY_APP_ID-:}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${PROMPT_REGISTRY_APP_PRIVATE_KEY-:}
      DOCS_URL: /docs
      REDIS_CONNECTION_STRING: redis://redisdb:6379
      DYNAMODB_HOST: http://dynamodb:8000
      BETTERSTACK_KEY: ${BETTERSTACK_KEY:-none}
      AWS_PROFILE: dev
    depends_on:
      dynamodb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 30s || exit 1]
      interval: 60s
      timeout: 40s
      retries: 5
      start_period: 90s
    networks:
      - onclusive-net

  dynamodb:
    command: -jar DynamoDBLocal.jar -sharedDb
    image: amazon/dynamodb-local:latest
    restart: always
    expose:
      - 8000
    ports:
      - 8000:8000
    profiles: [serve, integration, functional, debug]
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 3s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net

  redisdb:
    image: redis:7.0
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    profiles: [serve, integration, functional, debug]
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 3s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net

networks:
  onclusive-net:
