---
version : '3.9'

services:
  # =============================================
  # REGISTER
  # =============================================

  register:
    build:
      context: ../../
      dockerfile: projects/topic/register/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-063759612765}
        PROJECT: topic
        COMPONENT: register
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    volumes:
      - type: bind
        source: register/src
        target: /projects/topic/register/src
    image: ${AWS_ACCOUNT_ID:-063759612765}.dkr.ecr.us-east-1.amazonaws.com/topic-register:${IMAGE_TAG:-latest}
    command: [python, -m, src.register_features]
    profiles: [register]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: register/config/prod.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  register-unit:
    volumes:
      - type: bind
        source: register/
        target: /projects/topic/register/
    image: ${AWS_ACCOUNT_ID:-063759612765}.dkr.ecr.us-east-1.amazonaws.com/topic-register:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [register, unit]
    hostname: onclusive-ml
    networks: [onclusive-net]

  # =============================================
  # TRAIN
  # =============================================

  train:
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              # that's the closest analogue to --gpus; provide
              # an integer amount of devices or 'all'
              count: 1
              # Devices are reserved using a list of capabilities, making
              # capabilities the only required field. A device MUST
              # satisfy all the requested capabilities for a successful
              # reservation.
              capabilities: [gpu]
    build:
      context: ../../
      dockerfile: projects/topic/train/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-063759612765}
        PROJECT: topic
        COMPONENT: train
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.2}
    image: ${AWS_ACCOUNT_ID:-063759612765}.dkr.ecr.us-east-1.amazonaws.com/topic-train:${IMAGE_TAG:-latest}
    command: [python, -m, src.train_model]
    profiles: [train]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    env_file: train/config/prod.env
    hostname: onclusive-ml
    networks: [onclusive-net]

  train-unit:
    image: ${AWS_ACCOUNT_ID:-063759612765}.dkr.ecr.us-east-1.amazonaws.com/topic-train:${IMAGE_TAG}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [train, unit]
    environment:
      NEPTUNE_API_TOKEN: ${NEPTUNE_API_TOKEN}
    hostname: onclusive-ml
    networks: [onclusive-net]


networks:
  onclusive-net:
