---
version : '3.9'

services:
  # =====================================================
  # FRONTEND
  # =====================================================
  frontend:
    build:
      context: ../../
      dockerfile: apps/prompt/frontend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      cache_to:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=prompt-frontend,mode=max
      cache_from:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=prompt-frontend
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: frontend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-frontend:${IMAGE_TAG}
    command: [npm, start]
    profiles: [frontend]
    ports:
      - 3000:3000
    environment:
      ENVIRONMENT: dev
      REACT_APP_API_KEY: 1234
      REACT_APP_API_URI: http://localhost:4000/api/v1

  frontend-unit:
    build:
      context: ../../
      dockerfile: apps/prompt/frontend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: frontend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-frontend:${IMAGE_TAG}
    command: [/bin/sh, -c, sleep 3s]
    profiles: [frontend, unit]
    environment:
      ENVIRONMENT: dev
      REACT_APP_API_KEY: 1234
      REACT_APP_API_URI: http://localhost:4000/api/v1

  # =====================================================
  # BACKEND
  # =====================================================
  backend:
    build:
      context: ../../
      dockerfile: apps/prompt/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      cache_to:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=prompt-backend,mode=max
      cache_from:
        - type=s3,bucket=ecr-cache-${DEPLOYMENT},region=us-east-1,name=prompt-backend
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-backend:${IMAGE_TAG:-latest}
    command: [uvicorn, src.app:app, --host, 0.0.0.0, --port, '4000', --reload, --log-level, debug]
    profiles: [backend, functional]
    healthcheck:
      test: [CMD-SHELL, sleep 50s || exit 1]
      interval: 5s
      retries: 5
      start_period: 15s
      timeout: 60s
    ports:
      - 4000:4000
    environment:
      ENVIRONMENT: dev
      OPENAI_API_KEY: ${OPENAI_API_KEY:-none}
      DOCS_URL: /docs
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-anything}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-anything}
      REDIS_CONNECTION_STRING: redis://redisdb:6379
      DYNAMODB_HOST: http://dynamodb:8000
      PROMPT_REGISTRY_APP_ID: ${PROMPT_REGISTRY_APP_ID}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${PROMPT_REGISTRY_APP_PRIVATE_KEY}
      VALIDATE_PROMPT_INJECTION: true
    depends_on:
      - dynamodb
      - redisdb
    networks:
      - onclusive-net

  backend-unit:
    build:
      context: ../../
      dockerfile: apps/prompt/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-backend:${IMAGE_TAG:-latest}
    command: [pytest, tests/unit, -ra, -vv, --capture=no]
    profiles: [unit]
    environment:
      ENVIRONMENT: dev
      OPENAI_API_KEY: ${OPENAI_API_KEY:-none}
      DOCS_URL: /docs
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-anything}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-anything}
      REDIS_CONNECTION_STRING: redis://redisdb:6379
      DYNAMODB_HOST: http://dynamodb:8000
      PROMPT_REGISTRY_APP_ID: ${PROMPT_REGISTRY_APP_ID}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${PROMPT_REGISTRY_APP_PRIVATE_KEY}
      VALIDATE_PROMPT_INJECTION: true
    networks:
      - onclusive-net

  backend-functional:
    build:
      context: ../../
      dockerfile: apps/prompt/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-backend:${IMAGE_TAG}
    command: [pytest, tests/functional, -ra, -vv, --capture=no]
    profiles: [functional]
    volumes:
      - type: bind
        source: backend/src
        target: /apps/prompt/backend/src
      - type: bind
        source: backend/tests
        target: /apps/prompt/backend/tests
      - type: bind
        source: ~/.aws/
        target: /apps/prompt/backend/.aws/
    environment:
      ENVIRONMENT: dev
      OPENAI_API_KEY: ${OPENAI_API_KEY:-none}
      PROMPT_REGISTRY_APP_ID: ${PROMPT_REGISTRY_APP_ID-:}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${PROMPT_REGISTRY_APP_PRIVATE_KEY-:}
      DOCS_URL: /docs
      REDIS_CONNECTION_STRING: redis://redisdb:6379
      DYNAMODB_HOST: http://dynamodb:8000
      BETTERSTACK_KEY: ${BETTERSTACK_KEY:-none}
      AWS_PROFILE: dev
      VALIDATE_PROMPT_INJECTION: true
    depends_on:
      backend:
        condition: service_healthy
      dynamodb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
    networks:
      - onclusive-net

  backend-integration:
    build:
      context: ../../
      dockerfile: apps/prompt/backend/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}

      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        APP_NAME: prompt
        APP_COMPONENT: backend
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG:-v23.11.3}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/prompt-backend:${IMAGE_TAG:-latest}
    command: [pytest, tests/integration, -ra, -vv, --capture=no]
    profiles: [integration]
    environment:
      ENVIRONMENT: dev
      OPENAI_API_KEY: ${OPENAI_API_KEY:-none}
      DOCS_URL: /docs
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-anything}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-anything}
      REDIS_CONNECTION_STRING: redis://redisdb:6379
      DYNAMODB_HOST: http://dynamodb:8000
      PROMPT_REGISTRY_APP_ID: ${PROMPT_REGISTRY_APP_ID}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${PROMPT_REGISTRY_APP_PRIVATE_KEY}
      VALIDATE_PROMPT_INJECTION: true
    depends_on:
      dynamodb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
    networks:
      - onclusive-net

  dynamodb:
    command: -jar DynamoDBLocal.jar -sharedDb
    image: amazon/dynamodb-local:latest
    restart: always
    expose:
      - 8000
    ports:
      - 8000:8000
    profiles: [backend, functional, integration]
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 3s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net

  redisdb:
    image: redis:7.0
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    profiles: [backend, functional, integration]
    healthcheck:
      # NOTE: This hack is required so that the integration tests only start when the
      # databse is ready to receive requests.
      test: [CMD-SHELL, sleep 3s || exit 1]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s
    networks:
      - onclusive-net

networks:
  onclusive-net:
