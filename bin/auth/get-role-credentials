"""Script to get credentials to assume role.

Example:

eval `python3 bin/auth/get-role-credentials <role-arn> -s <session-name> -e <external-id>`

Which will register the environment variables required to assume the role.
You can check that the role is assumes by running the command:

>>> aws sts get-caller-identity
"""

import os

import boto3
import click


@click.command()
@click.argument("role-arn")
@click.option(
    "--session-name",
    "-s",
    help="Session name.",
)
@click.option(
    "--external-id",
    "-e",
    help="External id.",
)
def main(role_arn: str, session_name: str, external_id: str) -> None:
    """Return credentials to assume role."""
    # Clear previous credentials (if exists).
    try:
        del os.environ["AWS_ACCESS_KEY_ID"]
        del os.environ["AWS_SECRET_ACCESS_KEY"]
        del os.environ["AWS_SESSION_TOKEN"]
    except Exception:
        pass

    session = boto3.Session()

    sts = session.client("sts")
    response = sts.assume_role(
        RoleArn=role_arn, RoleSessionName=session_name, ExternalId=external_id
    )

    print(
        f"""
export AWS_ACCESS_KEY_ID={response['Credentials']['AccessKeyId']}
export AWS_SECRET_ACCESS_KEY={response['Credentials']['SecretAccessKey']}
export AWS_SESSION_TOKEN={response['Credentials']['SessionToken']}
        """
    )

if __name__ == "__main__":
    main()
