from sagemaker.estimator import Estimator
from dotenv import dotenv_values
from datetime import datetime as dt
import click
import os

from onclusiveml.tracking import TrackedGithubActionsSpecs

SAGEMAKER_ROLE_TEMPLATE = "arn:aws:iam::063759612765:role/mesh-sagemaker-execution-role-{aws_environment}"
SAGEMAKER_S3_OUTPUT = "s3://onclusive-model-store-{aws_environment}/sagemaker-outputs"
ECR_URI_TEMPLATE = "{aws_account_id}.dkr.ecr.us-east-1.amazonaws.com"
IMAGE_URI_TEMPLATE = "{ecr_uri}/{project_name}-train:{image_tag}"

@click.command()
@click.option(
    '--aws-account-id',
    default='063759612765',
    help="""The ID of the context AWS account. Defaults to `dev` AWS account id `063759612765`."""
)
@click.option(
    '--aws-environment',
    default='dev',
    type=click.Choice(['dev','stage']),
    help="""The AWS environment for the execution. Used to determine sagemaker access and (log)
        storage resources. Options are `dev` for development, and `stage` for CI."""
)
@click.option(
    '--instance-type',
    default='ml.m4.xlarge',
    help="""EC2 instance type to use to run container on Sagemaker. See
        `https://aws.amazon.com/sagemaker/pricing/` for more options. Select 'local'/'local_gpu'
        for testing. Defaults to `ml.m4.xlarge`."""
)
@click.option(
    '--instance-count',
    type=int,
    default=1,
    help="""Number of EC2 instances to use to run container on Sagemaker. Note onclusiveml images
        do not currently support distributed model training."""
)
@click.option(
    '--project-name',
    default='keywords',
    help="""The name of the ml-mesh project the train component belongs to. Defaults to
        `keywords`."""
)
@click.option(
    '--image-tag',
    default='latest',
    help="Image tag of container to be run on sagemaker. Defaults to `latest`."
)
@click.option(
    '--run-configuration-dotenv',
    default=None,
    help="""Optional. The path to the dotenv file containing environment variables to configure the
        current run. If not provided, attempts to fall back on file located at
        `/projects/{project_name}/{project_component}/config/prod.env`. If unable to locate the
        fallback option, no additional environment variables other than the Neptune API token are
        provided to the container at runtime"""
)
@click.option(
    '--neptune-api-token',
    default='dummy-token',
    help="""The neptune AI model registry authentication token required for every model regsitry
        interaction. Will be injected into the container at runtime. Defaults to `dummy-token`."""
)
def project_train(
    aws_environment: str,
    aws_account_id: str,
    instance_type: str,
    instance_count: int,
    project_name: str,
    image_tag: str,
    run_configuration_dotenv: str,
    neptune_api_token: str) -> None:

    # get (aws) resources
    sagemaker_role = SAGEMAKER_ROLE_TEMPLATE.format(aws_environment=aws_environment)
    click.echo(f"Using sagemaker execution role {sagemaker_role}")

    sagemaker_s3_output = SAGEMAKER_S3_OUTPUT.format(aws_environment=aws_environment)
    click.echo(f"Using s3 output {sagemaker_s3_output}")

    ecr_uri = ECR_URI_TEMPLATE.format(aws_account_id=aws_account_id)
    click.echo(f"Using ECR URI {ecr_uri}")

    image_uri = IMAGE_URI_TEMPLATE.format(ecr_uri=ecr_uri,project_name=project_name,image_tag=image_tag)
    click.echo(f"Using image URI {image_uri}")

    # dotenv file based train spec
    if run_configuration_dotenv is not None:
        training_env_vars = dotenv_values(run_configuration_dotenv)
    else:
        probable_dotenv = os.path.join(
            'projects',
            project_name,
            'train',
            'config',
            'prod.env'
        )

        if os.path.isfile(probable_dotenv):
            click.echo(
                "No dotenv configuration provided. Falling back on likely candidate "
                f"{probable_dotenv}"
            )
            training_env_vars = dotenv_values(probable_dotenv)

        else:
            click.echo(
                f"Could not locate likely candidate {probable_dotenv}. Defaulting"
                "to container configuration (if it exists)."
            )
            training_env_vars = {}

    click.echo(f"Using training environment variables {training_env_vars}")

    # env var based ci spec
    github_action_env_vars = TrackedGithubActionsSpecs().dict()

    # add neptune api token and github action specs to train spec to create env var spec
    all_env_vars = {**training_env_vars,
                    **github_action_env_vars,
                    **{'NEPTUNE_API_TOKEN':neptune_api_token}}

    training_base_job_name = f"{project_name}-train"

    estimator = Estimator(
        image_uri=image_uri,
        base_job_name=training_base_job_name,
        role=sagemaker_role,
        instance_count=instance_count,
        instance_type=instance_type,
        output_path=sagemaker_s3_output,
        # only sensitive env vars need to be passed here, the rest are defined in the container via
        # dot.env file
        environment = all_env_vars,
        container_log_level=10
    )

    estimator.fit(job_name=f"{training_base_job_name}-{dt.now().strftime('%Y-%m-%d--%H-%M-%S')}")

if __name__ == "__main__":
    project_train()
