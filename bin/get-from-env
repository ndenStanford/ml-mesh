"""Populate environment variables which may or may not be set."""

import os
import re
import shlex
import sys

import click


ROOT_DIR = os.path.dirname(
    os.path.dirname(
        os.path.realpath(__file__)
    )
)

def parse_env_file(filename: str):
    """ Parse the content of a .env file (a line-delimited KEY=value format) into a
    dictionary mapping keys to values.
    """
    values = {}
    with open(filename) as f:
        for line in f:
            lexer = shlex.shlex(line, posix=True)
            tokens = list(lexer)

            # parses the assignment statement
            if len(tokens) < 3:
                continue

            name, op = tokens[:2]
            value = ''.join(tokens[2:])

            if op != '=':
                continue
            if not re.match(r'[A-Za-z_][A-Za-z_0-9]*', name):
                continue

            value = value.replace(r'\n', '\n')
            value = value.replace(r'\t', '\t')
            values[name] = value

        return values


def get_from_env(env, var, default=None):
    """Get value of an environment variable.

    Looks first in the the environment, then the .env file.
    If no match is found, returns a default value if given or raises a KeyError.
    """
    if var in os.environ:
        return os.environ[var]
    if var in env:
        return env[var]

    if not default:
        raise KeyError(f"{var} not found in environment or .env file")
    return default


def get_from_env_with_file_fallback(var, default):
    env = parse_env_file(os.path.join(ROOT_DIR, '.env'))
    return get_from_env(env, var, default)


@click.command()
@click.argument("var")
@click.option(
    "--default",
    "-d",
    help="Default value for variable.",
    default=None
)
def main(var, default):
    try:
        print(get_from_env_with_file_fallback(var, default))
    except KeyError as e:
        sys.stderr.write(str(e) + '\n')
        sys.exit(1)

if __name__ == '__main__':
    main()
