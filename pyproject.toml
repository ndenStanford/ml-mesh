[tool.poetry]
name = "ml-mesh"
version = "0.1.0"
description = "Development dependencies"
authors = ["Rene Jean Corneille <rene-jean.corneille@onclusive.com>"]

[tool.poetry.dependencies]
python = "3.8.16"
click = "8.1.0"
core = {path = "libs/core"}
pytest = "7.2.0"
pytype = "2024.4.11"

[tool.poetry.group.ci.dependencies]
boto3 = "^1.28.29"
sagemaker = "^2.178.0"
python-dotenv = "^1.0.0"
tracking = {path = "libs/tracking"}

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.pytype]

# Space-separated list of files or directories to exclude.
exclude = [
    '**/**/tests/**/**',
    '**/*_test.py',
    '**/test_*.py',
    '**/**/conftest.py'
]

# Space-separated list of files or directories to process.
inputs = [
    'apps/**/**',
    'libs/**/**',
    'projects/**/**',
]

# Keep going past errors to analyze as many files as possible.
keep_going = true

# Run N jobs in parallel. When 'auto' is used, this will be equivalent to the
# number of CPUs on the host system.
jobs = 'auto'

# All pytype output goes here.
output = '.pytype'

# Platform (e.g., "linux", "win32") that the target code runs on.
platform = 'linux'

# Paths to source code directories, separated by ':'.
pythonpath = '.'

# Python version (major.minor) of the target code.
python_version = '3.8'

# Bind 'self' in methods with non-transparent decorators. This flag is temporary
# and will be removed once this behavior is enabled by default.
bind_decorated_methods = false

# Don't allow None to match bool. This flag is temporary and will be removed
# once this behavior is enabled by default.
none_is_not_bool = false

# Enable parameter count checks for overriding methods with renamed arguments.
# This flag is temporary and will be removed once this behavior is enabled by
# default.
overriding_renamed_parameter_count_checks = false

# Variables initialized as None retain their None binding. This flag is
# temporary and will be removed once this behavior is enabled by default.
strict_none_binding = false

# Support the third-party fiddle library. This flag is temporary and will be
# removed once this behavior is enabled by default.
use_fiddle_overlay = false

# Opt-in: Do not allow Any as a return type.
no_return_any = false

# Opt-in: Require decoration with @typing.override when overriding a method or
# nested class attribute of a parent class.
require_override_decorator = false

# Experimental: Infer precise return types even for invalid function calls.
precise_return = false

# Experimental: Solve unknown types to label with structural types.
protocols = false

# Experimental: Only load submodules that are explicitly imported.
strict_import = false

# Experimental: Enable exhaustive checking of function parameter types.
strict_parameter_checks = false

# Experimental: Emit errors for comparisons between incompatible primitive
# types.
strict_primitive_comparisons = false

# Experimental: Check that variables are defined in all possible code paths.
strict_undefined_checks = false

# Experimental: FOR TESTING ONLY. Use pytype/rewrite/.
use_rewrite = false

# Space-separated list of error names to ignore.
disable = [
    'pyi-error',
    'import-error'
]

# Don't report errors.
report_errors = true
