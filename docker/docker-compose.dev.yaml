---

services:
  # ===========================================================
  # PYTHON BASE
  # ===========================================================
  python-base:
    build:
      context: ..
      dockerfile: ./docker/python-base/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_TAG: ${IMAGE_TAG}
        IMAGE_NAME: python-base
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/python-base:${IMAGE_TAG}

  # ===========================================================
  # GPU BASE
  # ===========================================================
  gpu-base:
    build:
      context: ..
      dockerfile: ./docker/gpu-base/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_NAME: gpu-base
        IMAGE_TAG: ${IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/gpu-base:${IMAGE_TAG}

  # ===========================================================
  # NEURON INFERENCE
  # ===========================================================

  # NOTE: The neuron-inference image generates its own neuron compiled artifacts during the build
  # stage, which it picks up when running the tests. The /docker/neuron-inference/tests/input_inference
  # container directory must not be overriden by bind mounts.
  neuron-inference:
    build:
      context: ..
      dockerfile: ./docker/neuron-inference/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_TAG: ${IMAGE_TAG}
        IMAGE_NAME: neuron-inference
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/neuron-inference:${IMAGE_TAG}
    depends_on:
      - python-base

  # ===========================================================
  # KUBEFLOW TORCH CPU
  # ===========================================================

  kubeflow-torch-cpu:
    build:
      context: ..
      dockerfile: ./docker/kubeflow-torch-cpu/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_TAG: ${IMAGE_TAG}
        IMAGE_NAME: kubeflow-torch-cpu
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-2.amazonaws.com/kubeflow-torch-cpu:${IMAGE_TAG}
    ports:
      - 8888:8888

  # ===========================================================
  # KUBEFLOW TORCH GPU
  # ===========================================================

  kubeflow-torch-gpu:
    build:
      context: ..
      dockerfile: ./docker/kubeflow-torch-gpu/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_TAG: ${IMAGE_TAG}
        IMAGE_NAME: kubeflow-torch-gpu
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-2.amazonaws.com/kubeflow-torch-gpu:${IMAGE_TAG}
    ports:
      - 8888:8888

  # ===========================================================
  # DASK BASE
  # ===========================================================

  dask-base:
    build:
      context: ..
      dockerfile: ./docker/dask-base/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_TAG: ${IMAGE_TAG}
        IMAGE_NAME: dask-base
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-2.amazonaws.com/dask-base:${IMAGE_TAG}
  dask-scheduler:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-2.amazonaws.com/dask-base:${IMAGE_TAG}
    ports:
      - 8786:8786
      - 8787:8787
    command: [dask-scheduler]
    depends_on:
      - dask-base

  dask-worker:
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-2.amazonaws.com/dask-base:${IMAGE_TAG}
    hostname: dask-worker
    command: [dask-worker, tcp://scheduler:8786]
    depends_on:
      - dask-base

  # ===========================================================
  # KUBEFLOW TORCH INF
  # ===========================================================

  kubeflow-torch-inf:
    build:
      context: ..
      dockerfile: ./docker/kubeflow-torch-inf/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_TAG: ${IMAGE_TAG}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        IMAGE_NAME: kubeflow-torch-inf
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-2.amazonaws.com/kubeflow-torch-inf:${IMAGE_TAG}
    ports:
      - 8888:8888

  # ===========================================================
  # BEAM BACKFILL
  # ===========================================================

  beam-backfill:
    build:
      context: ..
      dockerfile: ./docker/beam-backfill/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_TAG: ${IMAGE_TAG}
        IMAGE_NAME: beam-backfill
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/beam-backfill:${IMAGE_TAG}

  # ===========================================================
  # BEAM WORKER
  # ===========================================================

  beam-worker:
    stdin_open: true
    tty: true
    entrypoint: [/bin/bash]
    build:
      context: ..
      dockerfile: ./docker/beam-worker/Dockerfile
      target: ${TARGET_BUILD_STAGE:-development}
      network: host
      args:
        AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-690763002009}
        IMAGE_TAG: ${IMAGE_TAG}
        IMAGE_NAME: beam-worker
    image: ${AWS_ACCOUNT_ID:-690763002009}.dkr.ecr.us-east-1.amazonaws.com/beam-worker:${IMAGE_TAG}
