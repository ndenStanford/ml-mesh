---
name: Model Compilation
on  :
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: Environment where code is deployed [prod, stage]
      project:
        required: true
        type: string
        description: Project.
      tag:
        required: true
        type: string
        description: Version tag of image providing the compilation runtime context.
      upload-compiled-model:
        required: false
        type: boolean
        default: true
        description: Whether to upload the compiled model to the Neptune AI model registry. Only relevant when compilation pipeline is being run.
      release:
        required: true
        default: true
        type: boolean
        description: If false, the compilation pipeline is only being run if the project's `compile` component's directory has been altered.
      pull-request:
        required: true
        default: true
        type: boolean
        description: Indicates whether this workflow is running for a Pull Request.
      runner-kind:
        required: true
        default: custom
        type: string
        description: If 'custom', a customized self hosted runner will be provided. Otherwise needs to be a valid Github Actions runner kind reference.
      self-hosted-runner-type:
        required: false
        default: inf1.6xlarge
        type: string
        description: Which EC2 instance type to provide as a self hosted runner. Only relevant if `runner-kind`='custom'.
      self-hosted-runner-ami:
        required: false
        default: ami-0c8faa5a41f5bb913
        type: string
        description: The EC2 AMI of the self hosted runner. Default value is in-house AL2 based AMI.
      self-hosted-runner-neuron:
        required: false
        default: true
        type: boolean
        description: Whether to install AWS neuron dependencies on self hosted runner. Only relevant if `runner-kind`='custom'.
    secrets:
      AWS_ACCOUNT_ID:
        required: true
        description: AWS account ID.
      AWS_DEFAULT_REGION:
        required: true
        description: AWS account region
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key ID.
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS secret access key
      GH_PERSONAL_ACCESS_TOKEN:
        required: true
        description: Github PAT to allow EC2 instance to connect to Github repository content.
      NEPTUNE_API_TOKEN:
        required: true
        description: The API token for the neptune service account managing the model registry.

jobs:
  check-run-criteria:
    name: 'Run criteria: ${{ inputs.project }} compilation'
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    outputs:
      run: ${{ inputs.release || steps.files-changed.outputs.this == 'true' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: dorny/paths-filter@v3
        id: files-changed
        name: Get a list of modified files.
        with:
          list-files: shell
          filters: |
            this:
              - added | modified: 'projects/${{ inputs.project }}/compile/**'

  provision-customized-runner:
    name: 'Start runner: ${{ inputs.project }} compilation'
    needs: check-run-criteria
    uses: ./.github/workflows/_provision-customized-runner.yaml
    if: ${{ needs.check-run-criteria.outputs.run == 'true' && inputs.runner-kind == 'custom' }}
    with:
      environment: ${{ inputs.environment }}
      self-hosted-runner-type: ${{ inputs.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ inputs.self-hosted-runner-ami }}
    secrets:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  set-runner-specs:
    name: 'Resolve runner specs: ${{ inputs.project }} compilation'
    needs: provision-customized-runner
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    if: ${{ always() && needs.check-run-criteria.outputs.run == 'true' }}
    outputs:
      runner-label: ${{ steps.set-runner-label.outputs.value }}
      runner-instance-id: ${{ steps.set-runner-instance-id.outputs.value }}
    steps:
      - name: Toggle runner label
        uses: haya14busa/action-cond@v1
        id: set-runner-label
        with:
          cond: ${{ inputs.runner-kind == 'custom' }}
          if_true: ${{ needs.provision-customized-runner.outputs.runner-label }}
          if_false: ${{ inputs.runner-kind }}

      - name: Toggle runner instance type
        uses: haya14busa/action-cond@v1
        id: set-runner-instance-id
        with:
          cond: ${{ inputs.runner-kind == 'custom' }}
          if_true: ${{ needs.provision-customized-runner.outputs.runner-instance-id }}
          if_false: ''

  compile-model:
    name: 'Compile & register model: ${{ inputs.project }}'
    needs: [check-run-criteria, set-runner-specs]
    runs-on: ${{ needs.set-runner-specs.outputs.runner-label }}
    timeout-minutes: 30
    if: ${{ always() && needs.check-run-criteria.outputs.run == 'true' }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Get ECR credentials | ${{ inputs.environment }} ${{ inputs.project }}-compile
        run: make docker.login AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Download model
        run: |
          echo 'Downloading Uncompiled Model'
          make projects.run/${{ inputs.project }} \
            ENVIRONMENT=ci \
            COMPONENT=compile \
            TASK=download-model \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            IMAGE_TAG="${{ inputs.tag }}"

      - name: Compile Model
        run: |
          echo 'Compiling Model'
          make projects.start/${{ inputs.project }} \
            ENVIRONMENT=ci \
            COMPONENT=compile \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            IMAGE_TAG="${{ inputs.tag }}"

      - name: Validate Compiled Model
        run: |
          echo 'Validating Compiled Model'
          make projects.run/${{ inputs.project }} \
            ENVIRONMENT=ci \
            COMPONENT=compile \
            TASK=validate-model \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            IMAGE_TAG="${{ inputs.tag }}"

      - name: Upload Compiled Model
        if: ${{ inputs.upload-compiled-model && !inputs.pull-request }}
        run: |
          echo 'Uploading Compiled Model'
          make projects.run/${{ inputs.project }} \
            ENVIRONMENT=ci \
            COMPONENT=compile \
            TASK=upload-model \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            ONCLUSIVEML_NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            IMAGE_TAG="${{ inputs.tag }}"

  stop-customized-runner:
    name: 'Stop runner: ${{ inputs.project }} compilation'
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: [check-run-criteria, set-runner-specs, compile-model]
    environment: ${{ inputs.environment }}
    if: ${{ always() && needs.check-run-criteria.outputs.run == 'true' && inputs.runner-kind == 'custom' }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2.3.7
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.set-runner-specs.outputs.runner-label }}
          ec2-instance-id: ${{ needs.set-runner-specs.outputs.runner-instance-id }}
