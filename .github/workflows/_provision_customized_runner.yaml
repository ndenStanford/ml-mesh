name: Customize Runner
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment where code is deployed [prod, stage]"
      self-hosted-runner-type:
        required: true
        default: inf1.xlarge
        type: string
        description: "The EC2 instance type of the self hosted runner."
      setup-docker-compose:
        required: true
        default: true
        type: boolean
        description: "Whether to set up docker compose on the runner."
      setup-neuron:
        required: true
        default: true
        type: boolean
        description: "Whether to set up neuron driver and runtime OS libraries on the runner."
    secrets:
      AWS_DEFAULT_REGION:
        required: true
        description: "AWS account region"
      AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key ID."
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"
      AWS_ROLE_TO_ASSUME:
        required: true
        description: "AWS IAM role to assume."
      GH_PERSONAL_ACCESS_TOKEN:
        required: true
        description: "Github PAT to allow EC2 instance to connect to Github repository content."
    outputs:
      runner-label:
        description: "Unique runner label, serving as an identifier of the provisioned, customized runner."
        value: ${{ jobs.provision-runner.outputs.label }}
      runner-instance-id:
        description: "The AWS EC2 instance if of the provisioned, customized runner."
        value: ${{ jobs.provision-runner.outputs.ec2-instance-id }}

jobs:
  provision-runner:
    name: Provision self-hosted EC2 runner
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: DeployManifests

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-0d2a1f4cfde325652 # <- most recent build artifact from merged PR #357 | ami-04b40c32c6992d916 # <- one of the first successful custom builds # ami-0bef6cc322bfff646 <- official amazon linux 2 - doesnt even have docker
          ec2-instance-type: ${{ inputs.self-hosted-runner-type }}
          subnet-id: subnet-0b4bfc562953af299
          security-group-id: sg-00def06a1c2518854
          # iam-role-name: ${{ secrets.AWS_ROLE_TO_ASSUME }} # optional, requires additional permissions
          # TODO: add timestamp and environment name to the instance name
          aws-resource-tags: > # optional, requires additional permissions
            [
              {"Key": "Name", "Value": "ml-ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "Environment", "Value": "dev"},
              {"Key": "Stack", "Value": "mesh"},
              {"Key": "Billing", "Value": "ML"}
            ]

  customize-runner:
    name: Customize self-hosted EC2 runner
    runs-on: ${{ needs.provision-runner.outputs.label }}
    needs: provision-runner
    env:
      ebs-mount-point: /mnt/ebs

    steps:
      - name: Check disks
        run: |
          df -h
          lsblk

      - name: Mount EBS volume
        run: |
          sudo file -s /dev/nvme1n1 # Check for EBS drive
          sudo fdisk -l # List all drives & partitions
          sudo mkfs -t xfs /dev/nvme1n1 # Create filesystem
          sudo mkdir /mnt/ebs # Create mount point
          sudo mount -t xfs -o nouuid /dev/nvme1n1 ${{ env.ebs-mount-point }} # Mount drive

      - name: Install neuron libraries
        if: ${{ inputs.setup-neuron }}
        run: |
          echo "Installing neuron libraries"
          sudo tee /etc/yum.repos.d/neuron.repo > /dev/null <<EOF
          [neuron]
          name=Neuron YUM Repository
          baseurl=https://yum.repos.neuron.amazonaws.com
          enabled=1
          metadata_expire=0
          EOF
          sudo rpm --import https://yum.repos.neuron.amazonaws.com/GPG-PUB-KEY-AMAZON-AWS-NEURON.PUB
          sudo yum update -y
          sudo yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r) -y
          sudo yum install aws-neuronx-dkms-2.* -y
          sudo yum install aws-neuronx-tools-2.* -y
          export PATH=/opt/aws/neuron/bin:$PATH
          echo "Available neuron devicces:"
          neuron-ls

      - name: Install docker compose
        if: ${{ inputs.setup-docker-compose }}
        run: |
          echo "Stopping all docker processes"
          sudo systemctl stop docker
          sudo systemctl stop docker.socket
          sudo systemctl stop containerd
          echo "Installing docker compose"
          sudo yum update -y
          sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          sudo sed -i 's/$releasever/7/g' /etc/yum.repos.d/docker-ce.repo
          sudo yum install -y docker-compose-plugin jq
          echo "Configuring docker dir to mounted EBS volume"
          sudo touch /etc/docker/daemon.json
          sudo jq -n --arg docker_dir "${{ env.ebs-mount-point }}/docker" '{"data-root": $docker_dir}' > /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          echo "Restarting docker"
          sudo systemctl enable docker
          sudo systemctl start docker
          echo "Docker installation file directory:"
          docker info -f '{{ .DockerRootDir}}'
          echo "Docker compose installation complete. Version:"
          docker compose version
