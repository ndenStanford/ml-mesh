---
name: Provision customized Runner
on  :
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: Environment where code is deployed [prod, dev]
      self-hosted-runner-type:
        required: true
        default: inf1.2xlarge
        type: string
        description: The EC2 instance type of the self hosted runner.
      self-hosted-runner-ami:
        required: false
        default: ami-0e993cb10eb6e4046
        type: string
        description: The EC2 AMI of the self hosted runner. Choose ami-03e201058e36661a3 for inferentia, ami-0255b953a852e0cb5 for cpu, or ami-0af5c083127a8adce
          for gpu.
      setup-docker-compose:
        required: true
        default: true
        type: boolean
        description: Whether to set up docker compose on the runner.
      setup-neuron:
        required: true
        default: true
        type: boolean
        description: Whether to set up neuron driver and runtime OS libraries on the runner.
      setup-cuda:
        required: true
        default: true
        type: boolean
        description: Whether to set up CUDA driver on the runner.
      neuron-dkms-version:
        required: false
        default: aws-neuronx-dkms-2.9.4.0
        type: string
        description: 'The neuron driver version to be installed. Valid options are: `aws-neuron-dkms-2.3.26.*` or `aws-neuronx-dkms-2.*`'
      neuron-tools-version:
        required: false
        default: aws-neuronx-tools-2.10.1.0
        type: string
        description: The neuron inspection tool suite version to be installed. Valid options are:`aws-neuron-tools-2.1.4.*` or `aws-neuronx-tools-2.*`
    secrets:
      AWS_DEFAULT_REGION:
        required: true
        description: AWS account region
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key ID.
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS secret access key
      GH_PERSONAL_ACCESS_TOKEN:
        required: true
        description: Github PAT to allow EC2 instance to connect to Github repository content.
    outputs:
      runner-label:
        description: Unique runner label, serving as an identifier of the provisioned, customized runner.
        value: ${{ jobs.provision-runner.outputs.label }}
      runner-instance-id:
        description: The AWS EC2 instance if of the provisioned, customized runner.
        value: ${{ jobs.provision-runner.outputs.ec2-instance-id }}

jobs:
  provision-runner:
    name: Provision self-hosted EC2 runner
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{ inputs.environment }}
    outputs:
      label: ${{ fromJSON( steps.start-ec2-runner.outputs.outputs ).label }}
      ec2-instance-id: ${{ fromJSON( steps.start-ec2-runner.outputs.outputs ).ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: Wandalen/wretry.action@master
        with:
          action: machulav/ec2-github-runner@v2.3.4
          with: |
            mode: start
            github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
            ec2-image-id: ${{ inputs.self-hosted-runner-ami }}
            ec2-instance-type: ${{ inputs.self-hosted-runner-type }}
            subnet-id: ${{ vars.RUNNER_SUBNET_ID }}
            security-group-id: ${{ vars.RUNNER_SG_ID }}
            aws-resource-tags: |
              [
                {"Key": "Name", "Value": "ml-ec2-github-runner"},
                {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
                {"Key": "Environment", "Value": "${{ vars.ENVIRONMENT }}"},
                {"Key": "Stack", "Value": "mesh"},
                {"Key": "Billing", "Value": "ML"}
              ]
          attempt_limit: 3
          attempt_delay: 10

  customize-runner:
    name: Customize self-hosted EC2 runner
    runs-on: ${{ needs.provision-runner.outputs.label }}
    needs: provision-runner
    env:
      ebs-mount-point: /mnt/ebs

    steps:
      - name: Check disks
        run: |
          df -h
          lsblk

      - name: Mount EBS volume
        run: |
          sudo file -s /dev/nvme1n1 # Check for EBS drive
          sudo fdisk -l # List all drives & partitions
          sudo mkfs -t xfs /dev/nvme1n1 # Create filesystem
          sudo mkdir /mnt/ebs # Create mount point
          sudo mount -t xfs -o nouuid /dev/nvme1n1 ${{ env.ebs-mount-point }} # Mount drive

      - name: Install neuron libraries
        if: ${{ inputs.setup-neuron }}
        run: |
          echo "Configure Linux for Neuron repository updates"
          sudo tee /etc/yum.repos.d/neuron.repo > /dev/null <<EOF
          [neuron]
          name=Neuron YUM Repository
          baseurl=https://yum.repos.neuron.amazonaws.com
          enabled=1
          metadata_expire=0
          EOF
          sudo rpm --import https://yum.repos.neuron.amazonaws.com/GPG-PUB-KEY-AMAZON-AWS-NEURON.PUB
          sudo yum update -y
          sudo yum install git kernel-devel-$(uname -r) kernel-headers-$(uname -r) -y
          sudo yum install ${{ inputs.neuron-dkms-version }} -y
          sudo yum install ${{ inputs.neuron-tools-version }} -y
          export PATH=/opt/aws/neuron/bin:$PATH
          echo "Available neuron device(s):"
          neuron-ls
          ls /dev/neuron* -l

      - name: Install docker compose
        if: ${{ inputs.setup-docker-compose }}
        run: |
          echo "Stopping all docker processes"
          sudo systemctl stop docker
          sudo systemctl stop docker.socket
          sudo systemctl stop containerd
          echo "Installing docker compose"
          sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          sudo sed -i 's/$releasever/7/g' /etc/yum.repos.d/docker-ce.repo
          sudo yum list docker-ce --showduplicates
          sudo yum install -y docker-compose-plugin jq
          echo "Configuring docker dir to mounted EBS volume"
          sudo touch /etc/docker/daemon.json
          sudo jq -n --arg docker_dir "${{ env.ebs-mount-point }}/docker" '{"data-root": $docker_dir}' > /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          echo "Restarting docker"
          sudo systemctl enable docker
          sudo systemctl start docker
          echo "Docker installation file directory:"
          docker info -f '{{ .DockerRootDir}}'
          echo "Docker compose installation complete. Version:"
          docker compose version
