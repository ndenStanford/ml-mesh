---
name       : ML-mesh CI Workflow

on         :
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
    types:
      - ready_for_review
      - opened
      - synchronize
      - reopened

concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: Deployment ${{ github.ref_name }}

jobs       :

  # ===============================================
  # GET CORE DEPENDENCIES VERSIONS
  # ===============================================

  run-get-core-dependencies-versions:
    name: Core dependencies versions
    runs-on: ubuntu-20.04
    outputs:
      python-version: ${{ steps.get-python.outputs.version }}
      poetry-version: ${{ steps.get-poetry.outputs.version }}
    steps:

      - name: Check out code
        uses: actions/checkout@v4

      - name: Get python version
        id: get-python
        run: |
          echo "::set-output name=version::$(cat .python-version)"
      - name: Get poetry version
        id: get-poetry
        run: |
          echo "::set-output name=version::$(cat .poetry-version)"

  # ===============================================
  # GET ENVIRONMENT NAME
  # ===============================================

  get-environment:
    name: Get Environment Name.
    runs-on: ubuntu-20.04
    outputs:
      name: ${{ steps.get-environment-name.outputs.value }}
    steps:

      - name: Get Environment name
        uses: haya14busa/action-cond@v1
        id: get-environment-name
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: dev
          if_false: prod

  # ===============================================
  # QUALITY CHECKS
  # ===============================================

  run-code-quality-checks:
    name: Run Pre-Commit Checks
    uses: ./.github/workflows/_code-quality.yaml
    needs: [run-get-core-dependencies-versions, get-environment]
    with:
      environment: ${{ needs.get-environment.outputs.name }}
      pull-request: ${{ github.event_name == 'pull_request' }}
      timeout: 20
      poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
    secrets:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # ===============================================
  # GET REPOSITORY STATE
  # ===============================================

  run-repository-state:
    name: Get Repository metadata
    uses: ./.github/workflows/_repository-state.yaml
    needs: [get-environment, run-code-quality-checks]
    with:
      environment: ${{ needs.get-environment.outputs.name }}
      pull-request: ${{ github.event_name == 'pull_request' }}
      base-ref: ${{ github.base_ref }}
      head-ref: ${{ github.ref_name }}
      pre-release: ${{ github.ref_name == 'develop' }}
      include-pre-releases: ${{ github.ref_name == 'develop' }}
    secrets:
      GITHUB_TOKEN_: ${{ secrets.GITHUB_TOKEN }}

  # ===============================================
  # GET TARGET BRANCH NAME
  # ===============================================

  get-target-branch-name:
    name: Get Push/Pull target branch name.
    runs-on: ubuntu-20.04
    outputs:
      name: ${{ steps.get-target-branch.outputs.value }}
    steps:

      - name: Get target branch
        uses: haya14busa/action-cond@v1
        id: get-target-branch
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: ${{ github.base_ref }}
          if_false: ${{ github.ref_name }}


  # ===============================================
  # TEST LIBS
  # ===============================================

  run-libs-tests:
    name: Library
    uses: ./.github/workflows/_libs.yaml
    needs: [run-repository-state, get-target-branch-name, run-get-core-dependencies-versions]

    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        libs:
          - name: core
            integration: false
            functional: false

          - name: compile
            integration: false
            functional: false

          - name: models
            integration: false
            functional: false

          - name: serving
            integration: false
            functional: false

          - name: tracking
            integration: false
            functional: false # TODO: turn this to true when self hosted runners are available.

          - name: nlp
            integration: false
            functional: false

          - name: hashing
            integration: false
            functional: false

          - name: data
            integration: false
            functional: false

    with:
      lib: ${{ matrix.libs.name }}
      integration: ${{ matrix.libs.integration }}
      functional: ${{ matrix.libs.functional }}
      python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
      poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR

  # ===============================================
  # DOCKER
  # ===============================================

  run-us-east-1-base-docker:
    name: Core Image
    uses: ./.github/workflows/_docker.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 2
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        image:

          - name: python-base
            validate-build: false
            runner-kind: ubuntu-20.04

          - name: gpu-base
            validate-build: true
            self-hosted-runner-type: g4dn.xlarge
            self-hosted-runner-ami: ami-0afe8751fcfde1e8e
            runner-kind: custom

        base-region: [us-east-1]
        region: [us-east-1]
        self-hosted-runner-neuron: [false]
        use-cache: [true]

    with:
      environment: ${{ needs.get-environment.outputs.name }}
      image: ${{ matrix.image.name }}
      base-region: ${{ matrix.base-region }}
      region: ${{ matrix.region }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      validate-build: ${{ matrix.image.validate-build }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.image.runner-kind }}
      self-hosted-runner-type: ${{ matrix.image.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.image.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  run-us-east-1-docker:
    name: Adv. Core Image
    uses: ./.github/workflows/_docker.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, run-us-east-1-base-docker, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        image:

          - name: gpu-train
            validate-build: false
            self-hosted-runner-type: g4dn.xlarge
            self-hosted-runner-ami: ami-0afe8751fcfde1e8e
            self-hosted-runner-neuron: false
            runner-kind: custom

          - name: neuron-compile
            validate-build: true
            self-hosted-runner-type: inf1.xlarge # (e.g. AWS inferentia gen1 chips)
            self-hosted-runner-ami: ami-020eedc2951da9189
            self-hosted-runner-neuron: true
            runner-kind: custom

          - name: neuron-inference
            validate-build: true
            self-hosted-runner-type: inf1.xlarge # (e.g. AWS inferentia gen1 chips)
            self-hosted-runner-ami: ami-020eedc2951da9189
            self-hosted-runner-neuron: true
            runner-kind: custom

          - name: fastapi-serve
            validate-build: false
            self-hosted-runner-neuron: false
            runner-kind: ubuntu-20.04

          - name: beam-backfill
            validate-build: false
            self-hosted-runner-neuron: false
            runner-kind: ubuntu-20.04

          - name: beam-worker
            validate-build: false
            self-hosted-runner-type: m7a.medium
            self-hosted-runner-ami: ami-0fdef23b3cabab05f
            self-hosted-runner-neuron: false
            runner-kind: custom

        base-region: [us-east-1]
        region: [us-east-1]
        use-cache: [true]

    with:
      environment: ${{ needs.get-environment.outputs.name }}
      image: ${{ matrix.image.name }}
      base-region: ${{ matrix.base-region }}
      region: ${{ matrix.region }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      validate-build: ${{ matrix.image.validate-build }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.image.runner-kind }}
      self-hosted-runner-type: ${{ matrix.image.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.image.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.image.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  run-us-east-2-docker:
    name: KF Core Image
    uses: ./.github/workflows/_docker.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, run-us-east-1-base-docker, get-target-branch-name]
    strategy:
      max-parallel: 1
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        image:
          # kubeflow-torch-gpu
          - name: kubeflow-torch-gpu
            base-region: us-east-1
            self-hosted-runner-type: m7a.medium # only need the disk space here, not GPUs
            runner-kind: custom
            use-cache: true

          # kubeflow-torch-inf
          - name: kubeflow-torch-inf
            base-region: us-east-1
            self-hosted-runner-type: m7a.medium # only need the disk space here, not GPUs
            runner-kind: custom
            use-cache: true

          # kubeflow-jupyter
          - name: kubeflow-jupyter
            base-region: us-east-1
            self-hosted-runner-type: m7a.medium # only need the disk space here, not GPUs
            runner-kind: custom
            use-cache: true

          # kubeflow-torch-cpu
          - name: kubeflow-torch-cpu
            base-region: us-east-2
            self-hosted-runner-type: m7a.medium # only need the disk space here, not GPUs
            runner-kind: custom
            use-cache: true

          # kubeflow-data-science
          - name: kubeflow-data-science
            base-region: us-east-2
            self-hosted-runner-type: m7a.medium # only need the disk space here, not GPUs
            runner-kind: custom
            use-cache: true

        validate-build: [false]
        region: [us-east-2]
        self-hosted-runner-neuron: [false]

    with:
      environment: ${{ needs.get-environment.outputs.name }}
      image: ${{ matrix.image.name }}
      region: ${{ matrix.region }}
      base-region: ${{ matrix.image.base-region }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      validate-build: ${{ matrix.validate-build }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.image.runner-kind }}
      self-hosted-runner-type: ${{ matrix.image.self-hosted-runner-type }}
      self-hosted-runner-neuron: ${{ matrix.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.image.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  # ===============================================
  # PROJECTS
  # ===============================================

  # keywords

  run-keywords-project:
    name: Keywords Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 5
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04

          # compile
          - name: compile
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04

          # serve
          - name: serve
            download-model: true
            integration: true
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: inf1.xlarge
            self-hosted-runner-ami: ami-020eedc2951da9189

        use-cache: [true]

    with:
      project: keywords
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      use-cache: ${{ matrix.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # summarization

  run-summarization-project:
    name: Sum. Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # serve
          - name: serve
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            use-cache: true

    with:
      project: summarization
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.components.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # gch-summarization

  run-gch-summarization-project:
    name: GCH Sum. Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

          # serve
          - name: serve
            download-model: true
            integration: false
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: g4dn.xlarge
            self-hosted-runner-ami: ami-0afe8751fcfde1e8e
            self-hosted-runner-neuron: false
            use-cache: true

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

    with:
      project: gch-summarization
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # entity-linking

  run-entity-linking-project:
    name: Entity Linking Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: c6i.xlarge
            self-hosted-runner-ami: ami-0fdef23b3cabab05f
            self-hosted-runner-neuron: false
            use-cache: true

          # serve
          - name: serve
            download-model: true
            integration: true
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: g4dn.xlarge
            self-hosted-runner-ami: ami-0afe8751fcfde1e8e
            self-hosted-runner-neuron: false
            use-cache: true

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

    with:
      project: entity-linking
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}
      REDIS_CONNECTION_STRING: ${{ secrets.REDIS_CONNECTION_STRING }}


  # sentiment

  run-sentiment-project:
    name: Sentiment Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04

          # compile
          - name: compile
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04

          # serve
          - name: serve
            download-model: true
            integration: false
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: inf1.xlarge
            self-hosted-runner-ami: ami-020eedc2951da9189

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04

        use-cache: [true]

    with:
      project: sentiment
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      use-cache: ${{ matrix.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # iptc

  run-iptc-project:
    name: IPTC Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # ingest
          - name: ingest
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

          # register
          - name: register
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: g4dn.2xlarge
            self-hosted-runner-ami: ami-0afe8751fcfde1e8e
            self-hosted-runner-neuron: false
            use-cache: true

          # compile
          - name: compile
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

          # serve
          - name: serve
            download-model: true
            integration: true
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: inf1.xlarge
            self-hosted-runner-ami: ami-020eedc2951da9189
            self-hosted-runner-neuron: true
            use-cache: true

    with:
      project: iptc
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # iptc multi model client

  run-iptc-multi-project:
    name: IPTC Multi Model Client Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:

          # serve
          - name: serve
            download-model: false
            integration: true
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

    with:
      project: iptc-multi
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # translation

  run-translation-project:
    name: Translation Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # SERVE
          - name: serve
            download-model: false
            integration: false
            functional: true
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            use-cache: true

    with:
      project: translation
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      functional: ${{ matrix.components.functional }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.components.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # lsh

  run-lsh-project:
    name: LSH Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # serve
          - name: serve
            download-model: false
            integration: true
            functional: true
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false

        use-cache: [true]

    with:
      project: lsh
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}


  run-topic-project:
    name: Topic Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # register
          - name: register
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: c6i.xlarge
            self-hosted-runner-neuron: false
            use-cache: true

          # serve
          - name: serve
            download-model: true
            integration: false
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: c6i.xlarge
            self-hosted-runner-neuron: false
            use-cache: true

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false
            use-cache: true

    with:
      project: topic
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # transcript-segmentation

  run-transcript-segmentation-project:
    name: Transcr. Segm. Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # serve
          - name: serve
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            use-cache: true

    with:
      project: transcript-segmentation
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.components.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}
      PROMPT_REGISTRY_APP_ID: ${{ secrets.PROMPT_REGISTRY_APP_ID }}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}

  # topic-summarization

  run-topic-summarization-project:
    name: Topic Sum. Project
    uses: ./.github/workflows/_projects.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # serve
          - name: serve
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04

        use-cache: [true]

    with:
      project: topic-summarization
      environment: ${{ needs.get-environment.outputs.name }}
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}
      MEDIA_CLIENT_ID: ${{ secrets.MEDIA_CLIENT_ID }}
      MEDIA_CLIENT_SECRET: ${{ secrets.MEDIA_CLIENT_SECRET }}
      ELASTICSEARCH_KEY: ${{ secrets.ELASTICSEARCH_KEY }}
      PROMPT_REGISTRY_APP_ID: ${{ secrets.PROMPT_REGISTRY_APP_ID }}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}

  # ===============================================
  # APPS
  # ===============================================

  run-apps:
    name: Web App
    uses: ./.github/workflows/_apps.yaml
    needs: [get-environment, run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        apps:
          # NOTE: list of apps components to run

          # ========================
          # Prompt manager
          # ========================

          - name: prompt
            component: backend
            integration: true
            runner-kind: custom
            self-hosted-runner-type: c6i.xlarge
            self-hosted-runner-ami: ami-0af5c083127a8adce
            functional: true

          - name: prompt
            component: frontend
            integration: false
            runner-kind: ubuntu-20.04
            functional: false

        use-cache: [true]

    with:
      environment: ${{ needs.get-environment.outputs.name }}
      app: ${{ matrix.apps.name }}
      component: ${{ matrix.apps.component }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      integration: ${{ matrix.apps.integration }}
      functional: ${{ matrix.apps.functional }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.apps.runner-kind }}
      self-hosted-runner-type: ${{ matrix.apps.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.apps.self-hosted-runner-ami }}
      use-cache: ${{ matrix.use-cache }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PROMPT_REGISTRY_APP_ID: ${{ secrets.PROMPT_REGISTRY_APP_ID }}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  # ===============================================
  # COMPLETION CHECKPOINT
  # ===============================================

  check:
    runs-on: ubuntu-latest
    name: Jobs Completion Check
    if: always()
    needs:
      - get-environment
      - run-code-quality-checks
      - run-repository-state
      - run-get-core-dependencies-versions
      - get-target-branch-name
      - run-libs-tests
      - run-us-east-1-base-docker
      - run-us-east-1-docker
      - run-us-east-2-docker
      - run-keywords-project
      - run-summarization-project
      - run-gch-summarization-project
      - run-entity-linking-project
      - run-sentiment-project
      - run-iptc-project
      - run-iptc-multi-project
      - run-translation-project
      - run-lsh-project
      - run-topic-project
      - run-transcript-segmentation-project
      - run-topic-summarization-project
      - run-apps
    steps:
      - name: Check Job Statuses
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
