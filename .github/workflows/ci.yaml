---
name       : ML-mesh CI Workflow

on         :
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
    types:
      - ready_for_review
      - opened
      - synchronize
      - reopened

concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: Deployment ${{ github.ref_name }}

jobs       :

  # ===============================================
  # QUALITY CHECKS
  # ===============================================

  run-code-quality-checks:
    name: Run Pre-Commit Checks
    uses: ./.github/workflows/_code-quality.yaml
    with:
      environment: prod
      pull-request: false # run pre commit suite on all files, but retain toggle logic in _code-quality flow for now
      timeout: 10
    secrets:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # ===============================================
  # GET REPOSITORY STATE
  # ===============================================

  run-repository-state:
    name: Get Repository metadata
    uses: ./.github/workflows/_repository-state.yaml
    needs: [run-code-quality-checks]
    with:
      environment: prod
      pull-request: ${{ github.event_name == 'pull_request' }}
      base-ref: ${{ github.base_ref }}
      head-ref: ${{ github.ref_name }}
      pre-release: ${{ github.ref_name == 'develop' }}
      include-pre-releases: ${{ github.ref_name == 'develop' }}
    secrets:
      GITHUB_TOKEN_: ${{ secrets.GITHUB_TOKEN }}

  # ===============================================
  # GET CORE DEPENDENCIES VERSIONS
  # ===============================================

  run-get-core-dependencies-versions:
    name: Core dependencies versions
    runs-on: ubuntu-20.04
    needs: [run-code-quality-checks]
    outputs:
      python-version: ${{ steps.get-python.outputs.version }}
      poetry-version: ${{ steps.get-poetry.outputs.version }}
    steps:

      - name: Check out code
        uses: actions/checkout@v3

      - name: Get python version
        id: get-python
        run: |
          echo "::set-output name=version::$(cat .python-version)"
      - name: Get poetry version
        id: get-poetry
        run: |
          echo "::set-output name=version::$(cat .poetry-version)"

  # ===============================================
  # GET TARGET BRANCH NAME
  # ===============================================

  get-target-branch-name:
    name: Get Push/Pull target branch name.
    runs-on: ubuntu-20.04
    outputs:
      name: ${{ steps.get-environment-name.outputs.value }}
    steps:

      - name: Get Environment name
        uses: haya14busa/action-cond@v1
        id: get-environment-name
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: ${{ github.base_ref }}
          if_false: ${{ github.ref_name }}


  # ===============================================
  # TEST LIBS
  # ===============================================

  run-libs-tests:
    name: Library
    uses: ./.github/workflows/_libs.yaml
    needs: [run-repository-state, get-target-branch-name, run-get-core-dependencies-versions]

    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        libs:
          - name: core
            integration: false
            functional: false

          - name: compile
            integration: false
            functional: false

          - name: models
            integration: false
            functional: false

          - name: serving
            integration: false
            functional: false

          - name: tracking
            integration: false
            functional: false # TODO: turn this to true when self hosted runners are available.

          - name: nlp
            integration: false
            functional: false

          - name: hashing
            integration: false
            functional: false

          - name: data
            integration: false
            functional: false

    with:
      lib: ${{ matrix.libs.name }}
      integration: ${{ matrix.libs.integration }}
      functional: ${{ matrix.libs.functional }}
      python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
      poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR

  # ===============================================
  # DOCKER
  # ===============================================

  run-us-east-1-base-docker:
    name: Core Image
    uses: ./.github/workflows/_docker.yaml
    needs: [run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 2
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        image:

          - name: python-base
            validate-build: false
            runner-kind: ubuntu-20.04

          - name: gpu-base
            validate-build: true
            self-hosted-runner-type: g4dn.xlarge
            self-hosted-runner-ami: ami-0af5c083127a8adce
            runner-kind: custom

        base-region: [us-east-1]
        region: [us-east-1]
        self-hosted-runner-neuron: [false]

    with:
      environment: prod
      image: ${{ matrix.image.name }}
      base-region: ${{ matrix.base-region }}
      region: ${{ matrix.region }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      validate-build: ${{ matrix.image.validate-build }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.image.runner-kind }}
      self-hosted-runner-type: ${{ matrix.image.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.image.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.self-hosted-runner-neuron }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  run-us-east-1-docker:
    name: Adv. Core Image
    uses: ./.github/workflows/_docker.yaml
    needs: [run-repository-state, run-libs-tests, run-us-east-1-base-docker, get-target-branch-name]
    strategy:
      max-parallel: 1
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        image:

          - name: gpu-train
            validate-build: false
            self-hosted-runner-type: g4dn.xlarge
            self-hosted-runner-ami: ami-0af5c083127a8adce
            self-hosted-runner-neuron: false
            runner-kind: custom

          - name: neuron-compile
            validate-build: true
            self-hosted-runner-type: inf1.xlarge # (e.g. AWS inferentia gen1 chips)
            self-hosted-runner-ami: ami-07b4e00e2c69c3702
            self-hosted-runner-neuron: true
            runner-kind: custom

          - name: neuron-inference
            validate-build: true
            self-hosted-runner-type: inf1.xlarge # (e.g. AWS inferentia gen1 chips)
            self-hosted-runner-ami: ami-07b4e00e2c69c3702
            self-hosted-runner-neuron: true
            runner-kind: custom

          - name: fastapi-serve
            validate-build: false
            self-hosted-runner-neuron: false
            runner-kind: ubuntu-20.04

          - name: beam-backfill
            validate-build: false
            self-hosted-runner-neuron: false
            runner-kind: ubuntu-20.04

          - name: beam-worker
            validate-build: false
            self-hosted-runner-neuron: false
            runner-kind: ubuntu-20.04

        base-region: [us-east-1]
        region: [us-east-1]

    with:
      environment: prod
      image: ${{ matrix.image.name }}
      base-region: ${{ matrix.base-region }}
      region: ${{ matrix.region }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      validate-build: ${{ matrix.image.validate-build }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.image.runner-kind }}
      self-hosted-runner-type: ${{ matrix.image.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.image.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.image.self-hosted-runner-neuron }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  run-us-east-2-docker:
    name: KF Core Image
    uses: ./.github/workflows/_docker.yaml
    needs: [run-repository-state, run-libs-tests, run-us-east-1-base-docker, get-target-branch-name]
    strategy:
      max-parallel: 1
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        image:
          # kubeflow-torch-gpu
          - name: kubeflow-torch-gpu
            base-region: us-east-1
            self-hosted-runner-type: m7a.medium # only need the disk space here, not GPUs
            runner-kind: custom

          # kubeflow-torch-inf
          - name: kubeflow-torch-inf
            base-region: us-east-1
            runner-kind: ubuntu-20.04

          # kubeflow-jupyter
          - name: kubeflow-jupyter
            base-region: us-east-1
            runner-kind: ubuntu-20.04

          # kubeflow-torch-cpu
          - name: kubeflow-torch-cpu
            base-region: us-east-2
            runner-kind: ubuntu-20.04

          # kubeflow-data-science
          - name: kubeflow-data-science
            base-region: us-east-2
            runner-kind: ubuntu-20.04

          # dask-base
          - name: dask-base
            base-region: us-east-1
            runner-kind: ubuntu-20.04

        validate-build: [false]
        region: [us-east-2]
        self-hosted-runner-neuron: [false]

    with:
      environment: prod
      image: ${{ matrix.image.name }}
      region: ${{ matrix.region }}
      base-region: ${{ matrix.image.base-region }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      validate-build: ${{ matrix.validate-build }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.image.runner-kind }}
      self-hosted-runner-type: ${{ matrix.image.self-hosted-runner-type }}
      self-hosted-runner-neuron: ${{ matrix.self-hosted-runner-neuron }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  # ===============================================
  # PROJECTS
  # ===============================================

  # # keywords

  # run-keywords-project:
  #   name: Keywords Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 5
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # train
  #         - name: train
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #         # compile
  #         - name: compile
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #         # serve
  #         - name: serve
  #           download-model: true
  #           integration: true
  #           functional: true
  #           load: true
  #           upload-test-results: true
  #           runner-kind: custom
  #           self-hosted-runner-type: inf1.xlarge

  #   with:
  #     project: keywords
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # # summarization

  # run-summarization-project:
  #   name: Sum. Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # serve
  #         - name: serve
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #   with:
  #     project: summarization
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # # gch-summarization

  # run-gch-summarization-project:
  #   name: GCH-Sum. Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # train
  #         - name: train
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04
  #           self-hosted-runner-neuron: false

  #         # serve
  #         - name: serve
  #           download-model: true
  #           integration: false
  #           functional: true
  #           load: true
  #           upload-test-results: true
  #           runner-kind: custom
  #           self-hosted-runner-type: g4dn.xlarge
  #           self-hosted-runner-ami: ami-0af5c083127a8adce
  #           self-hosted-runner-neuron: false

  #         # backfill
  #         - name: backfill
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04
  #           self-hosted-runner-neuron: false

  #   with:
  #     project: gch-summarization
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #     self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
  #     self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # # entity-linking

  # run-entity-linking-project:
  #   name: Entity Linking Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # serve
  #         - name: serve
  #           download-model: true
  #           integration: true
  #           functional: true
  #           load: false
  #           upload-test-results: false
  #           runner-kind: custom
  #           self-hosted-runner-type: inf1.xlarge

  #         # backfill
  #         - name: backfill
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04
  #           self-hosted-runner-neuron: false

  #   with:
  #     project: entity-linking
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}


  # # sentiment

  # run-sentiment-project:
  #   name: Sentiment Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # train
  #         - name: train
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #         # compile
  #         - name: compile
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #         # serve
  #         - name: serve
  #           download-model: true
  #           integration: false
  #           functional: true
  #           load: true
  #           upload-test-results: true
  #           runner-kind: custom
  #           self-hosted-runner-type: inf1.xlarge

  #         # backfill
  #         - name: backfill
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #   with:
  #     project: sentiment
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # iptc

  run-iptc-project:
    name: IPTC Project
    uses: ./.github/workflows/_projects.yaml
    needs: [run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # # ingest
          # - name: ingest
          #   download-model: false
          #   integration: false
          #   functional: false
          #   load: false
          #   upload-test-results: false
          #   runner-kind: ubuntu-20.04
          #   self-hosted-runner-neuron: false

          # # register
          # - name: register
          #   download-model: false
          #   integration: false
          #   functional: false
          #   load: false
          #   upload-test-results: false
          #   runner-kind: ubuntu-20.04
          #   self-hosted-runner-neuron: false

          # # train
          # - name: train
          #   download-model: false
          #   integration: false
          #   functional: false
          #   load: false
          #   upload-test-results: false
          #   runner-kind: custom
          #   self-hosted-runner-type: g4dn.2xlarge
          #   self-hosted-runner-ami: ami-0af5c083127a8adce
          #   self-hosted-runner-neuron: false

          # compile
          - name: compile
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-neuron: false

          # # serve
          # - name: serve
          #   download-model: true
          #   integration: true
          #   functional: true
          #   load: true
          #   upload-test-results: true
          #   runner-kind: custom
          #   self-hosted-runner-type: inf1.xlarge
          #   self-hosted-runner-ami: ami-07b4e00e2c69c3702
          #   self-hosted-runner-neuron: true
    with:
      project: iptc
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # # ner

  # run-ner-project:
  #   name: NER Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # train
  #         - name: train
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #         # compile
  #         - name: compile
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #         # backfill
  #         - name: backfill
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #         # serve
  #         - name: serve
  #           download-model: true
  #           integration: false
  #           functional: true
  #           load: true
  #           upload-test-results: true
  #           runner-kind: custom
  #           self-hosted-runner-type: inf1.xlarge

  #   with:
  #     project: ner
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # # lsh

  # run-lsh-project:
  #   name: LSH Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # serve
  #         - name: serve
  #           download-model: false
  #           integration: true
  #           functional: true
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #   with:
  #     project: lsh
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}


  # run-topic-project:
  #   name: Topic Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # register
  #         - name: register
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04
  #           self-hosted-runner-neuron: false

  #         # train
  #         - name: train
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: custom
  #           self-hosted-runner-type: c6i.xlarge
  #           self-hosted-runner-neuron: false


  #         # serve
  #         - name: serve
  #           download-model: true
  #           integration: false
  #           functional: true
  #           load: true
  #           upload-test-results: true
  #           runner-kind: custom
  #           self-hosted-runner-type: c6i.xlarge
  #           self-hosted-runner-neuron: false


  #         # backfill
  #         - name: backfill
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04
  #           self-hosted-runner-neuron: false

  #   with:
  #     project: topic
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #     self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # # transcript-segmentation

  # run-transcript-segmentation-project:
  #   name: Transcr. Segm. Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # serve
  #         - name: serve
  #           download-model: false
  #           integration: true
  #           functional: true
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #   with:
  #     project: transcript-segmentation
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # # topic-summarization

  # run-topic-summarization-project:
  #   name: Topic Sum. Project
  #   uses: ./.github/workflows/_projects.yaml
  #   needs: [run-repository-state, run-libs-tests, get-target-branch-name]
  #   strategy:
  #     max-parallel: 10
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
  #     matrix:
  #       components:
  #         # NOTE: list of project components to run

  #         # serve
  #         - name: serve
  #           download-model: false
  #           integration: true
  #           functional: true
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #         # backfill
  #         - name: backfill
  #           download-model: false
  #           integration: false
  #           functional: false
  #           load: false
  #           upload-test-results: false
  #           runner-kind: ubuntu-20.04

  #   with:
  #     project: topic-summarization
  #     environment: prod
  #     component: ${{ matrix.components.name }}
  #     tag: ${{ needs.run-repository-state.outputs.tag }}
  #     download-model: ${{ matrix.components.download-model }}
  #     integration: ${{ matrix.components.integration }}
  #     functional: ${{ matrix.components.functional }}
  #     load: ${{ matrix.components.load }}
  #     upload-test-results: ${{ matrix.components.upload-test-results }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     runner-kind: ${{ matrix.components.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
  #     INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # # ===============================================
  # # REGISTER FEATURES
  # # ===============================================

  # run-register-pipelines:
  #   name: Register features
  #   uses: ./.github/workflows/_register-features.yaml
  #   needs:
  #     - run-repository-state
  #     - run-keywords-project
  #     - run-summarization-project
  #     - run-gch-summarization-project
  #     - run-sentiment-project
  #     - run-ner-project
  #     - run-lsh-project
  #     - run-iptc-project
  #     - run-topic-project
  #     - run-get-core-dependencies-versions


  #   strategy:
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
  #     matrix:
  #       models:
  #         - project: iptc
  #           tag: ${{ needs.run-repository-state.outputs.tag }}

  #         - project: topic
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #   with:
  #     environment: prod
  #     project: ${{ matrix.models.project }}
  #     tag: ${{ matrix.models.tag }}
  #     python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
  #     poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main'}}
  #     pull-request: ${{ github.event_name == 'pull_request' }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  # # ===============================================
  # # TRAIN MODELS
  # # ===============================================

  # run-train-pipelines:
  #   name: Train Model
  #   uses: ./.github/workflows/_train-model.yaml
  #   needs:
  #     - run-repository-state
  #     - run-keywords-project
  #     - run-summarization-project
  #     - run-gch-summarization-project
  #     - run-sentiment-project
  #     - run-ner-project
  #     - run-lsh-project
  #     - run-iptc-project
  #     - run-topic-project
  #     - run-register-pipelines
  #     - get-target-branch-name
  #     - run-get-core-dependencies-versions

  #   strategy:
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
  #     matrix:
  #       models:
  #         - project: keywords
  #           sagemaker-runner-type: ml.m4.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #         - project: ner
  #           sagemaker-runner-type: ml.m4.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #         - project: gch-summarization
  #           sagemaker-runner-type: ml.m4.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #         - project: topic
  #           sagemaker-runner-type: ml.p3.2xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}

  #   with:
  #     environment: prod
  #     project: ${{ matrix.models.project }}
  #     sagemaker-runner-type: ${{ matrix.models.sagemaker-runner-type }}
  #     tag: ${{ matrix.models.tag }}
  #     python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
  #     poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     pull-request: ${{ github.event_name == 'pull_request' }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}

  # # ===============================================
  # # TRAIN MULTI MODELS
  # # ===============================================

  # run-multi-train-pipelines:
  #   name: Train Multi-model
  #   uses: ./.github/workflows/_train-multi-model.yaml
  #   needs:
  #     - run-repository-state
  #     - run-iptc-project
  #     - run-register-pipelines
  #     - get-target-branch-name
  #     - run-get-core-dependencies-versions

  #   strategy:
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
  #     max-parallel: 10
  #     matrix:
  #       models:
  #         - project: iptc
  #           sagemaker-runner-type: ml.g4dn.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #           trained-project: onclusive/iptc-16000000
  #           trained-model: IP16000000-TRAINED
  #           wait: false
  #         - project: iptc
  #           sagemaker-runner-type: ml.g4dn.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #           trained-project: onclusive/iptc-20000697
  #           trained-model: IP20000697-TRAINED
  #           wait: false
  #         - project: iptc
  #           sagemaker-runner-type: ml.g4dn.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #           trained-project: onclusive/iptc-20000780
  #           trained-model: IP20000780-TRAINED
  #           wait: false
  #         - project: iptc
  #           sagemaker-runner-type: ml.g4dn.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #           trained-project: onclusive/iptc-20000799
  #           trained-model: IP20000799-TRAINED
  #           wait: false
  #         - project: iptc
  #           sagemaker-runner-type: ml.g4dn.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #           trained-project: onclusive/iptc-20000802
  #           trained-model: IP20000802-TRAINED
  #           wait: false
  #         - project: iptc
  #           sagemaker-runner-type: ml.g4dn.xlarge
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #           trained-project: onclusive/iptc-20000808
  #           trained-model: IP20000808-TRAINED
  #           wait: false
  #         - project: iptc
  #           sagemaker-runner-type: ${{ github.event_name == 'pull_request' && 'ml.g4dn.xlarge' || 'ml.p3.2xlarge' }}
  #           tag: ${{ needs.run-repository-state.outputs.tag }}
  #           trained-project: onclusive/iptc-20000822
  #           trained-model: IP20000822-TRAINED
  #           wait: false

  #   with:
  #     environment: prod
  #     project: ${{ matrix.models.project }}
  #     sagemaker-runner-type: ${{ matrix.models.sagemaker-runner-type }}
  #     tag: ${{ matrix.models.tag }}
  #     trained-project: ${{ matrix.models.trained-project }}
  #     trained-model: ${{ matrix.models.trained-model }}
  #     wait: ${{ matrix.models.wait }}
  #     python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
  #     poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     pull-request: ${{ github.event_name == 'pull_request' }}
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}

  # # ===============================================
  # # COMPILE MODELS
  # # ===============================================

  # run-compilation-pipelines:
  #   name: Compile Model
  #   uses: ./.github/workflows/_compile-model.yaml
  #   needs:
  #     - run-repository-state
  #     - run-keywords-project
  #     - run-summarization-project
  #     - run-sentiment-project
  #     - run-ner-project
  #     - run-lsh-project
  #     - run-iptc-project
  #     - run-train-pipelines
  #     - get-target-branch-name

  #   strategy:
  #     fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
  #     matrix:
  #       models:
  #         - project: keywords
  #           self-hosted-runner-type: inf1.2xlarge
  #           runner-kind: custom
  #           tag: ${{ needs.run-repository-state.outputs.tag }}

  #         - project: ner
  #           self-hosted-runner-type: inf1.2xlarge
  #           runner-kind: custom
  #           tag: ${{ needs.run-repository-state.outputs.tag }}

  #         - project: sentiment
  #           self-hosted-runner-type: inf1.2xlarge
  #           runner-kind: custom
  #           tag: ${{ needs.run-repository-state.outputs.tag }}

  #   with:
  #     environment: prod
  #     runner-kind: ${{ matrix.models.runner-kind }}
  #     self-hosted-runner-type: ${{ matrix.models.self-hosted-runner-type }}
  #     project: ${{ matrix.models.project }}
  #     tag: ${{ matrix.models.tag }}
  #     release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
  #     pull-request: ${{ github.event_name == 'pull_request' }}
  #     upload-compiled-model: true
  #   secrets:
  #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #     NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}

  # ===============================================
  # COMPILE MULTI MODELS
  # ===============================================

  run-multi-compilation-pipelines:
    name: Compile Model
    uses: ./.github/workflows/_compile-multi-model.yaml
    needs:
      - run-repository-state
      - run-iptc-project
      # - run-multi-train-pipelines
      - get-target-branch-name

    strategy:
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      max-parallel: 10
      matrix:
        models:
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-00000000
            uncompiled-model: IP00000000-TRAINED
            uncompiled-with-id: IP00000000-TRAINED-313
            compiled-project: onclusive/iptc-00000000
            compiled-model: IP00000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-01000000
            uncompiled-model: IP01000000-TRAINED
            uncompiled-with-id: IP01000000-TRAINED-1
            compiled-project: onclusive/iptc-01000000
            compiled-model: IP01000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-02000000
            uncompiled-model: IP02000000-TRAINED
            uncompiled-with-id: IP02000000-TRAINED-94
            compiled-project: onclusive/iptc-02000000
            compiled-model: IP02000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-03000000
            uncompiled-model: IP03000000-TRAINED
            uncompiled-with-id: IP03000000-TRAINED-20
            compiled-project: onclusive/iptc-03000000
            compiled-model: IP03000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-04000000
            uncompiled-model: IP04000000-TRAINED
            uncompiled-with-id: IP04000000-TRAINED-86
            compiled-project: onclusive/iptc-04000000
            compiled-model: IP04000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-05000000
            uncompiled-model: IP05000000-TRAINED
            uncompiled-with-id: IP05000000-TRAINED-8
            compiled-project: onclusive/iptc-05000000
            compiled-model: IP05000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-06000000
            uncompiled-model: IP06000000-TRAINED
            uncompiled-with-id: IP06000000-TRAINED-6
            compiled-project: onclusive/iptc-06000000
            compiled-model: IP06000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-07000000
            uncompiled-model: IP07000000-TRAINED
            uncompiled-with-id: IP07000000-TRAINED-5
            compiled-project: onclusive/iptc-07000000
            compiled-model: IP07000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-09000000
            uncompiled-model: IP09000000-TRAINED
            uncompiled-with-id: IP09000000-TRAINED-7
            compiled-project: onclusive/iptc-09000000
            compiled-model: IP09000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-10000000
            uncompiled-model: IP10000000-TRAINED
            uncompiled-with-id: IP10000000-TRAINED-6
            compiled-project: onclusive/iptc-10000000
            compiled-model: IP10000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-11000000
            uncompiled-model: IP11000000-TRAINED
            uncompiled-with-id: IP11000000-TRAINED-6
            compiled-project: onclusive/iptc-11000000
            compiled-model: IP11000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-12000000
            uncompiled-model: IP12000000-TRAINED
            uncompiled-with-id: IP12000000-TRAINED-4
            compiled-project: onclusive/iptc-12000000
            compiled-model: IP12000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-13000000
            uncompiled-model: IP13000000-TRAINED
            uncompiled-with-id: IP13000000-TRAINED-4
            compiled-project: onclusive/iptc-13000000
            compiled-model: IP13000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-14000000
            uncompiled-model: IP14000000-TRAINED
            uncompiled-with-id: IP14000000-TRAINED-4
            compiled-project: onclusive/iptc-14000000
            compiled-model: IP14000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-15000000
            uncompiled-model: IP15000000-TRAINED
            uncompiled-with-id: IP15000000-TRAINED-4
            compiled-project: onclusive/iptc-15000000
            compiled-model: IP15000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-16000000
            uncompiled-model: IP16000000-TRAINED
            uncompiled-with-id: IP16000000-TRAINED-18
            compiled-project: onclusive/iptc-16000000
            compiled-model: IP16000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-17000000
            uncompiled-model: IP17000000-TRAINED
            uncompiled-with-id: IP17000000-TRAINED-5
            compiled-project: onclusive/iptc-17000000
            compiled-model: IP17000000-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000002
            uncompiled-model: IP20000002-TRAINED
            uncompiled-with-id: IP20000002-TRAINED-4
            compiled-project: onclusive/iptc-20000002
            compiled-model: IP20000002-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000038
            uncompiled-model: IP20000038-TRAINED
            uncompiled-with-id: IP20000038-TRAINED-4
            compiled-project: onclusive/iptc-20000038
            compiled-model: IP20000038-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000045
            uncompiled-model: IP20000045-TRAINED
            uncompiled-with-id: IP20000045-TRAINED-5
            compiled-project: onclusive/iptc-20000045
            compiled-model: IP20000045-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000053
            uncompiled-model: IP20000053-TRAINED
            uncompiled-with-id: IP20000053-TRAINED-4
            compiled-project: onclusive/iptc-20000053
            compiled-model: IP20000053-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000056
            uncompiled-model: IP20000056-TRAINED
            uncompiled-with-id: IP20000056-TRAINED-3
            compiled-project: onclusive/iptc-20000056
            compiled-model: IP20000056-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000065
            uncompiled-model: IP20000065-TRAINED
            uncompiled-with-id: IP20000065-TRAINED-3
            compiled-project: onclusive/iptc-20000065
            compiled-model: IP20000065-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000082
            uncompiled-model: IP20000082-TRAINED
            uncompiled-with-id: IP20000082-TRAINED-3
            compiled-project: onclusive/iptc-20000082
            compiled-model: IP20000082-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000106
            uncompiled-model: IP20000106-TRAINED
            uncompiled-with-id: IP20000106-TRAINED-4
            compiled-project: onclusive/iptc-20000106
            compiled-model: IP20000106-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000121
            uncompiled-model: IP20000121-TRAINED
            uncompiled-with-id: IP20000121-TRAINED-3
            compiled-project: onclusive/iptc-20000121
            compiled-model: IP20000121-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000129
            uncompiled-model: IP20000129-TRAINED
            uncompiled-with-id: IP20000129-TRAINED-3
            compiled-project: onclusive/iptc-20000129
            compiled-model: IP20000129-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000139
            uncompiled-model: IP20000139-TRAINED
            uncompiled-with-id: IP20000139-TRAINED-3
            compiled-project: onclusive/iptc-20000139
            compiled-model: IP20000139-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000148
            uncompiled-model: IP20000148-TRAINED
            uncompiled-with-id: IP20000148-TRAINED-3
            compiled-project: onclusive/iptc-20000148
            compiled-model: IP20000148-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000170
            uncompiled-model: IP20000170-TRAINED
            uncompiled-with-id: IP20000170-TRAINED-3
            compiled-project: onclusive/iptc-20000170
            compiled-model: IP20000170-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000209
            uncompiled-model: IP20000209-TRAINED
            uncompiled-with-id: IP20000209-TRAINED-3
            compiled-project: onclusive/iptc-20000209
            compiled-model: IP20000209-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000385
            uncompiled-model: IP20000385-TRAINED
            uncompiled-with-id: IP20000385-TRAINED-3
            compiled-project: onclusive/iptc-20000385
            compiled-model: IP20000385-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000430
            uncompiled-model: IP20000430-TRAINED
            uncompiled-with-id: IP20000430-TRAINED-4
            compiled-project: onclusive/iptc-20000430
            compiled-model: IP20000430-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000441
            uncompiled-model: IP20000441-TRAINED
            uncompiled-with-id: IP20000441-TRAINED-3
            compiled-project: onclusive/iptc-20000441
            compiled-model: IP20000441-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000446
            uncompiled-model: IP20000446-TRAINED
            uncompiled-with-id: IP20000446-TRAINED-4
            compiled-project: onclusive/iptc-20000446
            compiled-model: IP20000446-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000464
            uncompiled-model: IP20000464-TRAINED
            uncompiled-with-id: IP20000464-TRAINED-3
            compiled-project: onclusive/iptc-20000464
            compiled-model: IP20000464-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000538
            uncompiled-model: IP20000538-TRAINED
            uncompiled-with-id: IP20000538-TRAINED-4
            compiled-project: onclusive/iptc-20000538
            compiled-model: IP20000538-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000565
            uncompiled-model: IP20000565-TRAINED
            uncompiled-with-id: IP20000565-TRAINED-3
            compiled-project: onclusive/iptc-20000565
            compiled-model: IP20000565-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000574
            uncompiled-model: IP20000574-TRAINED
            uncompiled-with-id: IP20000574-TRAINED-3
            compiled-project: onclusive/iptc-20000574
            compiled-model: IP20000574-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000587
            uncompiled-model: IP20000587-TRAINED
            uncompiled-with-id: IP20000587-TRAINED-3
            compiled-project: onclusive/iptc-20000587
            compiled-model: IP20000587-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000593
            uncompiled-model: IP20000593-TRAINED
            uncompiled-with-id: IP20000593-TRAINED-4
            compiled-project: onclusive/iptc-20000593
            compiled-model: IP20000593-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000621
            uncompiled-model: IP20000621-TRAINED
            uncompiled-with-id: IP20000621-TRAINED-3
            compiled-project: onclusive/iptc-20000621
            compiled-model: IP20000621-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000638
            uncompiled-model: IP20000638-TRAINED
            uncompiled-with-id: IP20000638-TRAINED-3
            compiled-project: onclusive/iptc-20000638
            compiled-model: IP20000638-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000649
            uncompiled-model: IP20000649-TRAINED
            uncompiled-with-id: IP20000649-TRAINED-3
            compiled-project: onclusive/iptc-20000649
            compiled-model: IP20000649-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000657
            uncompiled-model: IP20000657-TRAINED
            uncompiled-with-id: IP20000657-TRAINED-4
            compiled-project: onclusive/iptc-20000657
            compiled-model: IP20000657-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000697
            uncompiled-model: IP20000697-TRAINED
            uncompiled-with-id: IP20000697-TRAINED-7
            compiled-project: onclusive/iptc-20000697
            compiled-model: IP20000697-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000705
            uncompiled-model: IP20000705-TRAINED
            uncompiled-with-id: IP20000705-TRAINED-3
            compiled-project: onclusive/iptc-20000705
            compiled-model: IP20000705-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000717
            uncompiled-model: IP20000717-TRAINED
            uncompiled-with-id: IP20000717-TRAINED-3
            compiled-project: onclusive/iptc-20000717
            compiled-model: IP20000717-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000735
            uncompiled-model: IP20000735-TRAINED
            uncompiled-with-id: IP20000735-TRAINED-3
            compiled-project: onclusive/iptc-20000735
            compiled-model: IP20000735-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000742
            uncompiled-model: IP20000742-TRAINED
            uncompiled-with-id: IP20000742-TRAINED-4
            compiled-project: onclusive/iptc-20000742
            compiled-model: IP20000742-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000756
            uncompiled-model: IP20000756-TRAINED
            uncompiled-with-id: IP20000756-TRAINED-2
            compiled-project: onclusive/iptc-20000756
            compiled-model: IP20000756-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000775
            uncompiled-model: IP20000775-TRAINED
            uncompiled-with-id: IP20000775-TRAINED-3
            compiled-project: onclusive/iptc-20000775
            compiled-model: IP20000775-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000780
            uncompiled-model: IP20000780-TRAINED
            uncompiled-with-id: IP20000780-TRAINED-3
            compiled-project: onclusive/iptc-20000780
            compiled-model: IP20000780-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000799
            uncompiled-model: IP20000799-TRAINED
            uncompiled-with-id: IP20000799-TRAINED-2
            compiled-project: onclusive/iptc-20000799
            compiled-model: IP20000799-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000802
            uncompiled-model: IP20000802-TRAINED
            uncompiled-with-id: IP20000802-TRAINED-2
            compiled-project: onclusive/iptc-20000802
            compiled-model: IP20000802-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000808
            uncompiled-model: IP20000808-TRAINED
            uncompiled-with-id: IP20000808-TRAINED-2
            compiled-project: onclusive/iptc-20000808
            compiled-model: IP20000808-COMPILED
          - project: iptc
            self-hosted-runner-type: inf1.6xlarge
            runner-kind: custom
            tag: ${{ needs.run-repository-state.outputs.tag }}
            uncompiled-project: onclusive/iptc-20000822
            uncompiled-model: IP20000822-TRAINED
            uncompiled-with-id: IP20000822-TRAINED-9
            compiled-project: onclusive/iptc-20000822
            compiled-model: IP20000822-COMPILED
    with:
      environment: prod
      runner-kind: ${{ matrix.models.runner-kind }}
      self-hosted-runner-type: ${{ matrix.models.self-hosted-runner-type }}
      project: ${{ matrix.models.project }}
      tag: ${{ matrix.models.tag }}
      uncompiled-project: ${{ matrix.models.uncompiled-project}}
      uncompiled-model: ${{ matrix.models.uncompiled-model}}
      uncompiled-with-id: ${{ matrix.models.uncompiled-with-id}}
      compiled-project: ${{ matrix.models.compiled-project}}
      compiled-model: ${{ matrix.models.compiled-model}}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      pull-request: ${{ github.event_name == 'pull_request' }}
      upload-compiled-model: true
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}

  # ===============================================
  # APPS
  # ===============================================

  run-apps:
    name: Web App
    uses: ./.github/workflows/_apps.yaml
    needs: [run-repository-state, run-libs-tests, get-target-branch-name]
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        apps:
          # NOTE: list of apps components to run

          # ========================
          # Prompt manager
          # ========================

          - name: prompt
            component: backend
            integration: true

          - name: prompt
            component: frontend
            integration: false

          - name: entity-fishing
            component: backend
            integration: false

    with:
      environment: prod
      app: ${{ matrix.apps.name }}
      component: ${{ matrix.apps.component }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      integration: ${{ matrix.apps.integration }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
