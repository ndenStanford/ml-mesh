---
name       : ML-mesh CI Workflow

on         :
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
    types:
      - ready_for_review
      - opened
      - synchronize
      - reopened

concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: Deployment ${{ github.ref_name }}

jobs       :
  # ===============================================
  # QUALITY CHECKS
  # ===============================================

  run-code-quality-checks:
    name: Run Pre-Commit Checks
    uses: ./.github/workflows/_code-quality.yaml
    with:
      environment: prod
      pull-request: false # run pre commit suite on all files, but retain toggle logic in _code-quality flow for now
      timeout: 10

  # ===============================================
  # GET REPOSITORY STATE
  # ===============================================

  run-repository-state:
    name: Get Repository metadata
    uses: ./.github/workflows/_repository-state.yaml
    needs: [run-code-quality-checks]
    with:
      pull-request: ${{ github.event_name == 'pull_request' }}
      target-branch: ${{ github.ref_name }}
      prerelease: ${{ github.ref_name == 'develop' }}
      include-pre-releases: ${{ github.ref_name == 'develop' }}
    secrets:
      GITHUB_TOKEN_: ${{ secrets.GITHUB_TOKEN }}

  # # ===============================================
  # # TEST LIBS
  # # ===============================================

  # run-libs-tests:
  #   name: Run libraries unit and integration tests.
  #   uses: ./.github/workflows/_libs.yaml
  #   needs: [run-repository-state]

  #   strategy:
  #     max-parallel: 5
  #     fail-fast: ${{ github.ref_name != 'main' }}
  #     matrix:
  #       python-version: [3.8.16]
  #       poetry-version: [1.3.2]
  #       libs:
  #         - name: core
  #           integration: false
  #           functional: false

  #         - name: compile
  #           integration: false
  #           functional: false

  #         - name: models
  #           integration: false
  #           functional: false

  #         - name: serving
  #           integration: false
  #           functional: false

  #         - name: tracking
  #           integration: false
  #           functional: false # TODO: turn this to true when self hosted runners are available.

  #         - name: nlp
  #           integration: false
  #           functional: false

  #   with:
  #     lib: ${{ matrix.libs.name }}
  #     integration: ${{ matrix.libs.integration }}
  #     functional: ${{ matrix.libs.functional }}
  #     python-version: ${{ matrix.python-version }}
  #     poetry-version: ${{ matrix.poetry-version }}
  #     pull-request: ${{ github.event_name == 'pull_request' }}
  #     release: ${{ github.ref_name == 'main' }}

  # ===============================================
  # DOCKER
  # ===============================================

  run-docker:
    name: Core Docker Images.
    uses: ./.github/workflows/_docker.yaml
    #needs: [run-repository-state, run-libs-tests]
    needs: [run-repository-state]
    strategy:
      max-parallel: 1
      fail-fast: ${{ github.ref_name != 'main' }}
      matrix:
        image: [python-base, neuron-compile, neuron-inference, kubeflow-jupyter, kubeflow-torch-cpu, kubeflow-data-science, fastapi-serve]
        validate-build: [false]
    with:
      environment: prod
      image: ${{ matrix.image }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      pull-request: ${{ github.event_name == 'pull_request' }}
      validate-build: ${{ matrix.validate-build }}
      release: ${{ github.ref_name == 'main' }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # ===============================================
  # PROJECTS
  # ===============================================

  # TODO: @sreza1 optimize runtime of this succession of jobs.

  run-projects:
    name: ML Project components
    uses: ./.github/workflows/_projects.yaml
    #needs: [run-repository-state, run-libs-tests]
    needs: [run-repository-state]
    strategy:
      max-parallel: 10
      fail-fast: false #${{ github.ref_name != 'main' }}
      matrix:
        projects:
          # NOTE: list of project components to run

          # ========================
          # KEYWORDS
          # ========================

          # # train
          # - name: keywords
          #   component: train
          #   integration: false
          #   functional: false
          #   load: false
          #   runner-kind: ubuntu-20.04
          #   self-hosted-runner-type: n/a

          # # compile
          # - name: keywords
          #   component: compile
          #   integration: false
          #   load: false
          #   runner-kind: ubuntu-20.04
          #   self-hosted-runner-type: n/a

          # serve
          - name: keywords
            component: serve
            integration: true
            functional: true
            load: true
            runner-kind: custom
            self-hosted-runner-type: inf1.6xlarge

          # # ========================
          # # SUMMARIZATION
          # # ========================
          # # serve
          # - name: summarization
          #   component: serve
          #   integration: true
          #   functional: false
          #   load: false
          #   runner-kind: ubuntu-20.04
          #   self-hosted-runner-type: n/a

          # # ========================
          # # ENTITY LINKING
          # # ========================
          # # serve
          # - name: entity-linking
          #   component: serve
          #   integration: false
          #   functional: false
          #   load: false
          #   runner-kind: ubuntu-20.04
          #   self-hosted-runner-type: n/a

    with:
      environment: prod
      project: ${{ matrix.projects.name }}
      component: ${{ matrix.projects.component }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      integration: ${{ matrix.projects.integration }}
      functional: ${{ matrix.projects.functional }}
      load: ${{ matrix.projects.load }}
      pull-request: ${{ github.event_name == 'pull_request' }}
      release: ${{ github.ref_name == 'main' }}
      runner-kind: ${{ matrix.projects.runner-kind }}
      self-hosted-runner-type: ${{ matrix.projects.self-hosted-runner-type }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # ===============================================
  # COMPILE MODELS
  # ===============================================

  run-ml-compilation-pipelines:
    name: Compile ML models
    uses: ./.github/workflows/_compile_model.yaml
    needs: [run-repository-state, run-projects]

    strategy:
      fail-fast: ${{ github.ref_name != 'main' }}
      matrix:
        models:
          - runner-kind: custom
            self-hosted-runner-type: inf1.2xlarge
            project: keywords
            tag: ${{ needs.run-repository-state.outputs.tag }}

    with:
      environment: prod
      runner-kind: ${{ matrix.models.runner-kind }}
      self-hosted-runner-type: ${{ matrix.models.self-hosted-runner-type }}
      project: ${{ matrix.models.project }}
      tag: ${{ matrix.models.tag }}
      compile: ${{ github.event_name == 'push' }} # run the compilation pipeline on every merge into develop/prod
      upload-compiled-model: ${{ github.event_name == 'push' }} # upload the compiled model on every merge into develop/prod
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}

  # ===============================================
  # APPS
  # ===============================================

  run-apps:
    name: Web Applications
    uses: ./.github/workflows/_apps.yaml
    #needs: [run-repository-state, run-libs-tests]
    needs: [run-repository-state]
    strategy:
      max-parallel: 10
      fail-fast: ${{ github.ref_name != 'main' }}
      matrix:
        apps:
          # NOTE: list of apps components to run

          # ========================
          # Prompt manager
          # ========================

          - name: prompt
            component: backend
            integration: true

          - name: prompt
            component: frontend
            integration: false

          - name: entity-fishing
            component: backend
            integration: false

    with:
      environment: prod
      app: ${{ matrix.apps.name }}
      component: ${{ matrix.apps.component }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      integration: ${{ matrix.apps.integration }}
      pull-request: ${{ github.event_name == 'pull_request' }}
      release: ${{ github.ref_name == 'main' }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
