---
name       : ML-mesh CI Workflow

on         :
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
    types:
      - ready_for_review
      - opened
      - synchronize
      - reopened

concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: Deployment ${{ github.ref_name }}

jobs       :

  # ===============================================
  # GET CORE DEPENDENCIES VERSIONS
  # ===============================================

  run-get-core-dependencies-versions:
    name: Core dependencies versions
    runs-on: ubuntu-22.04
    outputs:
      python-version: ${{ steps.get-python.outputs.version }}
      poetry-version: ${{ steps.get-poetry.outputs.version }}
    steps:

      - name: Check out code
        uses: actions/checkout@v4

      - name: Get python version
        id: get-python
        run: |
          echo "::set-output name=version::$(cat .python-version)"
      - name: Get poetry version
        id: get-poetry
        run: |
          echo "::set-output name=version::$(cat .poetry-version)"

  # ===============================================
  # GET ENVIRONMENT NAME
  # ===============================================

  get-environment:
    name: Get Environment Name.
    runs-on: ubuntu-22.04
    outputs:
      name: ${{ steps.get-environment-name.outputs.value }}
    steps:

      - name: Get Environment name
        uses: haya14busa/action-cond@v1
        id: get-environment-name
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: dev
          if_false: prod

  # ===============================================
  # QUALITY CHECKS
  # ===============================================

  run-code-quality-checks:
    name: Run Pre-Commit Checks
    uses: ./.github/workflows/_code-quality.yaml
    needs: [run-get-core-dependencies-versions, get-environment]
    with:
      environment: prod
      pull-request: ${{ github.event_name == 'pull_request' }}
      timeout: 20
      poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
    secrets:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # ===============================================
  # GET REPOSITORY STATE
  # ===============================================

  run-repository-state:
    name: Get Repository metadata
    uses: ./.github/workflows/_repository-state.yaml
    needs: [get-environment, run-code-quality-checks]
    with:
      environment: prod
      pull-request: ${{ github.event_name == 'pull_request' }}
      base-ref: ${{ github.base_ref }}
      head-ref: ${{ github.ref_name }}
      pre-release: ${{ github.ref_name == 'develop' }}
      include-pre-releases: ${{ github.ref_name == 'develop' }}
    secrets:
      GITHUB_TOKEN_: ${{ secrets.GITHUB_TOKEN }}

  # ===============================================
  # GET TARGET BRANCH NAME
  # ===============================================

  get-target-branch-name:
    name: Get Push/Pull target branch name.
    runs-on: ubuntu-22.04
    outputs:
      name: ${{ steps.get-target-branch.outputs.value }}
    steps:

      - name: Get target branch
        uses: haya14busa/action-cond@v1
        id: get-target-branch
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: ${{ github.base_ref }}
          if_false: ${{ github.ref_name }}


  # ===============================================
  # UPLOAD BOOTSTRAP SCRIPT
  # ===============================================

  upload-bootstrap:
    name: Upload bootstrap script
    runs-on: ubuntu-22.04
    needs: [run-code-quality-checks]
    environment: prod
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Upload bootstrap script to S3
        if: ${{ !github.event_name == 'pull_request' }}
        run: aws s3 cp ./bin/bootstrap/linux s3://installation-script-dev/

  # ===============================================
  # TEST LIBS
  # ===============================================

  run-libs-tests:
    name: Library
    uses: ./.github/workflows/_libs.yaml
    needs: [get-environment, run-repository-state, get-target-branch-name, run-get-core-dependencies-versions]

    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        libs:

          - name: core
            integration: false

          - name: compile
            integration: false

          - name: models
            integration: false

          - name: serving
            integration: false

          - name: tracking
            integration: false

          - name: nlp
            integration: false

          - name: hashing
            integration: false

          - name: beam
            integration: false
            functional: false

          - name: io
            integration: true
            functional: false

          - name: feature_store
            integration: true

          - name: queries
            integration: false

          - name: ts
            integration: false


    with:
      environment: prod
      lib: ${{ matrix.libs.name }}
      integration: ${{ matrix.libs.integration }}
      python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
      poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
    secrets:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ONCLUSIVEML_FEATURE_STORE_MYSQL_HOST: ${{ secrets.ONCLUSIVEML_FEATURE_STORE_MYSQL_HOST }}
      ONCLUSIVEML_FEATURE_STORE_MYSQL_PASSWORD: ${{ secrets.ONCLUSIVEML_FEATURE_STORE_MYSQL_PASSWORD }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # ===============================================
  # TEST FEATURES
  # ===============================================

  run-features-test:
    name: Run feast feature store test
    uses: ./.github/workflows/_features.yaml
    needs: [run-repository-state, get-target-branch-name, run-get-core-dependencies-versions]
    with:
      test: true
      environment: prod
      python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
      poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
    secrets:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ONCLUSIVEML_FEATURE_STORE_MYSQL_HOST: ${{ secrets.ONCLUSIVEML_FEATURE_STORE_MYSQL_HOST }}
      ONCLUSIVEML_FEATURE_STORE_MYSQL_PASSWORD: ${{ secrets.ONCLUSIVEML_FEATURE_STORE_MYSQL_PASSWORD }}

  # ===============================================
  # DOCKER
  # ===============================================

  run-core-docker:
    name: Core Docker images
    uses: ./.github/workflows/_docker.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
    strategy:
      max-parallel: 2
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        image:

          - name: python-base
            region: us-east-2
            self-hosted-runner-type: c6i.large
            runner-kind: custom
            push-image: true

          - name: gpu-base
            region: us-east-2
            self-hosted-runner-type: c6i.large
            runner-kind: custom
            push-image: true

          - name: beam-backfill
            region: us-east-2
            self-hosted-runner-type: c6i.large
            runner-kind: custom
            push-image: true

          - name: neuron-inference
            region: us-east-2
            self-hosted-runner-type: c6i.large
            runner-kind: custom
            push-image: true
            base-image: python-base
            base-region: us-east-2

          - name: beam-worker
            region: us-east-2
            self-hosted-runner-type: c6i.large
            runner-kind: custom
            push-image: ${{ github.event_name != 'pull_request' }}

        self-hosted-runner-neuron: [false]
        self-hosted-runner-ami: [ami-046f0b2604eaac9c4]
        use-cache: [true]

    with:
      environment: prod
      image: ${{ matrix.image.name }}
      base-image: ${{ matrix.image.base-image }}
      base-region: ${{ matrix.image.region }}
      region: ${{ matrix.image.region }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.image.runner-kind }}
      self-hosted-runner-type: ${{ matrix.image.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.use-cache }}
      push-image: ${{ matrix.image.push-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  run-kubeflow-docker:
    name: Kubeflow Docker images
    uses: ./.github/workflows/_docker.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 5
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        image:

          # kubeflow-torch-cpu
          - name: kubeflow-torch-cpu
            region: us-east-2
            self-hosted-runner-type: c6i.large
            runner-kind: custom
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base
            base-region: us-east-2

          # kubeflow-torch-gpu
          - name: kubeflow-torch-gpu
            region: us-east-2
            self-hosted-runner-type: c6i.large
            runner-kind: custom
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: gpu-base
            base-region: us-east-2

          # kubeflow-torch-inf
          - name: kubeflow-torch-inf
            region: us-east-2
            self-hosted-runner-type: c6i.large
            runner-kind: custom
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference
            base-region: us-east-2

        self-hosted-runner-neuron: [false]
        self-hosted-runner-ami: [ami-046f0b2604eaac9c4]
        use-cache: [true]

    with:
      environment: prod
      image: ${{ matrix.image.name }}
      base-image: ${{ matrix.image.base-image }}
      base-region: ${{ matrix.image.base-region }}
      region: ${{ matrix.image.region }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.image.runner-kind }}
      self-hosted-runner-type: ${{ matrix.image.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.use-cache }}
      push-image: ${{ matrix.image.push-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  # ===============================================
  # PROJECTS
  # ===============================================

  # keywords

  run-keywords-project:
    name: Keywords Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 5
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

          # compile
          - name: compile
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference

          # serve
          - name: serve
            download-model: true
            integration: true
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: inf1.xlarge
            self-hosted-runner-ami: ami-00ca6f88d3e1669fb
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference

        use-cache: [true]

    with:
      project: keywords
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      use-cache: ${{ matrix.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # summarization

  run-summarization-project:
    name: Sum. Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # serve
          - name: serve
            download-model: false
            integration: true
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

    with:
      project: summarization
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.components.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}
      PROMPT_REGISTRY_APP_ID: ${{ secrets.PROMPT_REGISTRY_APP_ID }}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}

  # entity-linking

  run-entity-linking-project:
    name: Entity Linking Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: c6i.xlarge
            self-hosted-runner-ami: ami-046f0b2604eaac9c4
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

          # serve
          - name: serve
            download-model: true
            integration: true
            functional: false
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: g4dn.xlarge
            self-hosted-runner-ami: ami-03e4816f04f417e5a
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: gpu-base

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: beam-backfill

    with:
      project: entity-linking
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}
      REDIS_CONNECTION_STRING: ${{ secrets.REDIS_CONNECTION_STRING }}


  # sentiment

  run-sentiment-project:
    name: Sentiment Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

          # compile
          - name: compile
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference

          # serve
          - name: serve
            download-model: true
            integration: false
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: inf1.xlarge
            self-hosted-runner-ami: ami-00ca6f88d3e1669fb
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: beam-backfill

        use-cache: [true]

    with:
      project: sentiment
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      use-cache: ${{ matrix.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # iptc

  run-iptc-project:
    name: IPTC Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: g4dn.2xlarge
            self-hosted-runner-ami: ami-03e4816f04f417e5a
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: true
            base-image: gpu-base

          # compile
          - name: compile
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference

          # serve
          - name: serve
            download-model: true
            integration: true
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: inf1.xlarge
            self-hosted-runner-ami: ami-00ca6f88d3e1669fb
            self-hosted-runner-neuron: true
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference

    with:
      project: iptc
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # iptc multi model client

  run-iptc-multi-project:
    name: IPTC Multi Model Client Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:

          # serve
          - name: serve
            download-model: false
            integration: true
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

    with:
      project: iptc-multi
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # ner

  run-ner-project:
    name: NER Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }} # fixed. desired: TRUE for feature PR & PUSH events
      matrix:
        components:
          # NOTE: list of project components to run

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: beam-backfill

          # serve
          - name: serve
            download-model: true
            integration: false
            functional: true
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: inf1.xlarge
            self-hosted-runner-ami: ami-00ca6f88d3e1669fb
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference

               # compile
          - name: compile
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-20.04
            self-hosted-runner-type: inf1.xlarge
            self-hosted-runner-ami: ami-00ca6f88d3e1669fb
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: neuron-inference

    with:
      project: ner
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.components.self-hosted-runner-ami }}
      use-cache: ${{ matrix.components.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # translation

  run-translation-project:
    name: Translation Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # SERVE
          - name: serve
            download-model: false
            integration: false
            functional: true
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

    with:
      project: translation
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      functional: ${{ matrix.components.functional }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.components.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # lsh

  run-lsh-project:
    name: LSH Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # serve
          - name: serve
            download-model: false
            integration: true
            functional: true
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            self-hosted-runner-neuron: false
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            self-hosted-runner-neuron: false
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: beam-backfill

        use-cache: [true]

    with:
      project: lsh
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}


  run-topic-project:
    name: Topic Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # register
          - name: register
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: c6i.xlarge
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: gpu-base

          # serve
          - name: serve
            download-model: true
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: custom
            self-hosted-runner-type: c6i.xlarge
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: gpu-base

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            self-hosted-runner-neuron: false
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: beam-backfill

    with:
      project: topic
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      self-hosted-runner-neuron: ${{ matrix.components.self-hosted-runner-neuron }}
      use-cache: ${{ matrix.components.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # transcript-segmentation

  run-transcript-segmentation-project:
    name: Transcr. Segm. Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # serve
          - name: serve
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            use-cache: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

    with:
      project: transcript-segmentation
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.components.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}
      PROMPT_REGISTRY_APP_ID: ${{ secrets.PROMPT_REGISTRY_APP_ID }}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}

  # topic-summarization

  run-topic-summarization-project:
    name: Topic Sum. Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # serve
          - name: serve
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

          # backfill
          - name: backfill
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: beam-backfill

        use-cache: [true]

    with:
      project: topic-summarization
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      self-hosted-runner-type: ${{ matrix.components.self-hosted-runner-type }}
      use-cache: ${{ matrix.use-cache }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}
      MEDIA_API_CLIENT_ID: ${{ secrets.MEDIA_API_CLIENT_ID }}
      MEDIA_API_CLIENT_SECRET: ${{ secrets.MEDIA_API_CLIENT_SECRET }}
      ELASTICSEARCH_KEY: ${{ secrets.ELASTICSEARCH_KEY }}
      PROMPT_REGISTRY_APP_ID: ${{ secrets.PROMPT_REGISTRY_APP_ID }}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}

  # visitor-estimation

  run-visitor-estimation-project:
    name: Visitor Estimation Project
    uses: ./.github/workflows/_projects.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        components:
          # NOTE: list of project components to run

          # train
          - name: train
            download-model: false
            integration: false
            functional: false
            load: false
            upload-test-results: false
            runner-kind: ubuntu-22.04
            push-image: true
            base-image: python-base

    with:
      project: visitor-estimation
      environment: prod
      component: ${{ matrix.components.name }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      download-model: ${{ matrix.components.download-model }}
      integration: ${{ matrix.components.integration }}
      functional: ${{ matrix.components.functional }}
      load: ${{ matrix.components.load }}
      upload-test-results: ${{ matrix.components.upload-test-results }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.components.runner-kind }}
      push-image: ${{ matrix.components.push-image }}
      base-image: ${{ matrix.components.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      INTERNAL_ML_ENDPOINT_API_KEY: ${{ secrets.INTERNAL_ML_ENDPOINT_API_KEY }}

  # ===============================================
  # TRAIN MODELS
  # ===============================================

  run-train-pipelines:
    name: Train Model
    uses: ./.github/workflows/_train-model.yaml
    needs:
      - get-environment
      - run-repository-state
      - run-visitor-estimation-project
      - get-target-branch-name
      - run-get-core-dependencies-versions

    strategy:
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      max-parallel: 5
      matrix:
        models:
          - project: visitor-estimation
            sagemaker-runner-type: ml.m4.xlarge
            tag: ${{ needs.run-repository-state.outputs.tag }}
            trained-project: onclusive/visitor-estimation
            trained-model: VE-TRAINED
            parameters: "{}"
            wait: false

    with:
      environment: prod
      project: ${{ matrix.models.project }}
      sagemaker-runner-type: ${{ matrix.models.sagemaker-runner-type }}
      tag: ${{ matrix.models.tag }}
      trained-project: ${{ matrix.models.trained-project}}
      trained-model: ${{ matrix.models.trained-model}}
      wait: ${{ matrix.models.wait}}
      parameters: ${{ matrix.models.parameters}}
      python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
      poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      pull-request: ${{ github.event_name == 'pull_request' }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      ONCLUSIVEML_FEATURE_STORE_MYSQL_HOST: ${{ secrets.ONCLUSIVEML_FEATURE_STORE_MYSQL_HOST }}
      ONCLUSIVEML_FEATURE_STORE_MYSQL_PASSWORD: ${{ secrets.ONCLUSIVEML_FEATURE_STORE_MYSQL_PASSWORD }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # ===============================================
  # TRAIN MULTI MODELS
  # ===============================================

  run-multi-train-pipelines:
    name: Train Multi-model
    uses: ./.github/workflows/_train-multi-model.yaml
    needs:
      - get-environment
      - run-repository-state
      - run-iptc-project
      - get-target-branch-name
      - run-get-core-dependencies-versions

    strategy:
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      max-parallel: 10
      matrix:
        models:
          - project: iptc
            sagemaker-runner-type: ml.g4dn.xlarge
            tag: ${{ needs.run-repository-state.outputs.tag }}
            trained-project: onclusive/iptc-00000000
            trained-model: IP00000000-TRAINED
            parameters: "{}"
            wait: false

    with:
      environment: prod
      project: ${{ matrix.models.project }}
      sagemaker-runner-type: ${{ matrix.models.sagemaker-runner-type }}
      tag: ${{ matrix.models.tag }}
      trained-project: ${{ matrix.models.trained-project}}
      trained-model: ${{ matrix.models.trained-model}}
      wait: ${{ matrix.models.wait}}
      parameters: ${{ matrix.models.parameters}}
      python-version: ${{ needs.run-get-core-dependencies-versions.outputs.python-version }}
      poetry-version: ${{ needs.run-get-core-dependencies-versions.outputs.poetry-version }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      pull-request: ${{ github.event_name == 'pull_request' }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
      ONCLUSIVEML_FEATURE_STORE_MYSQL_HOST: ${{ secrets.ONCLUSIVEML_FEATURE_STORE_MYSQL_HOST }}
      ONCLUSIVEML_FEATURE_STORE_MYSQL_PASSWORD: ${{ secrets.ONCLUSIVEML_FEATURE_STORE_MYSQL_PASSWORD }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}


  # ===============================================
  # APPS
  # ===============================================

  run-apps:
    name: Web App
    uses: ./.github/workflows/_apps.yaml
    needs:
      - get-environment
      - run-repository-state
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
      - run-core-docker
    strategy:
      max-parallel: 10
      fail-fast: ${{ needs.get-target-branch-name.outputs.name == 'develop' }}
      matrix:
        apps:
          # NOTE: list of apps components to run

          # ========================
          # Prompt manager
          # ========================

          - name: prompt
            component: backend
            integration: true
            runner-kind: custom
            self-hosted-runner-type: c6i.xlarge
            self-hosted-runner-ami: ami-046f0b2604eaac9c4
            functional: true
            push-image: ${{ github.event_name != 'pull_request' }}
            base-image: python-base

          - name: prompt
            component: frontend
            integration: false
            runner-kind: ubuntu-22.04
            functional: false
            push-image: ${{ github.event_name != 'pull_request' }}

        use-cache: [true]

    with:
      environment: prod
      app: ${{ matrix.apps.name }}
      component: ${{ matrix.apps.component }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      integration: ${{ matrix.apps.integration }}
      functional: ${{ matrix.apps.functional }}
      release: ${{ needs.get-target-branch-name.outputs.name == 'main' || github.actor == 'dependabot[bot]' }} # if PR to main or dependabot PR
      runner-kind: ${{ matrix.apps.runner-kind }}
      self-hosted-runner-type: ${{ matrix.apps.self-hosted-runner-type }}
      self-hosted-runner-ami: ${{ matrix.apps.self-hosted-runner-ami }}
      use-cache: ${{ matrix.use-cache }}
      push-image: ${{ matrix.apps.push-image }}
      base-image: ${{ matrix.apps.base-image }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PROMPT_REGISTRY_APP_ID: ${{ secrets.PROMPT_REGISTRY_APP_ID }}
      PROMPT_REGISTRY_APP_PRIVATE_KEY: ${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  # ===============================================
  # COMPLETION CHECKPOINT
  # ===============================================

  check:
    runs-on: ubuntu-22.04
    name: Jobs Completion Check
    if: always()
    needs:
      - get-environment
      - run-code-quality-checks
      - run-repository-state
      - run-get-core-dependencies-versions
      - get-target-branch-name
      - run-libs-tests
      - run-core-docker
      - run-kubeflow-docker
      - run-keywords-project
      - run-summarization-project
      - run-entity-linking-project
      - run-sentiment-project
      - run-iptc-project
      - run-iptc-multi-project
      - run-ner-project
      - run-translation-project
      - run-lsh-project
      - run-topic-project
      - run-transcript-segmentation-project
      - run-topic-summarization-project
      - run-apps
      - run-train-pipelines
    steps:
      - name: Check Job Statuses
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
