name: Core Docker Images
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment where code is deployed [prod, stage]"
      image:
        required: true
        type: string
        description: "Image to build and test."
      build-strategy:
        required: false
        default: single-stage
        type: string
        description: "Build strategy for specified image [single-stage, multi-stage]"
      tag:
        required: true
        type: string
        description: "Version tag of image."
      pull-request:
        required: true
        default: true
        type: boolean
        description: "Indicates whether this workflow is running for a Pull Request."
    secrets:
      AWS_ACCOUNT_ID:
        required: true
        description: "AWS account ID."
      AWS_DEFAULT_REGION:
        required: true
        description: "AWS account region"
      AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key ID."
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"
      AWS_ROLE_TO_ASSUME:
        required: true
        description: "AWS IAM role to assume."

jobs:
  deploy:
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment }}
    env:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: DeployManifests

      - name: Get ECR credentials | ${{ inputs.environment }} ${{ inputs.image }}
        run: make docker.login AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Build Docker Image | ${{ inputs.environment }} ${{ inputs.image }}
        run: make docker.build/${{ inputs.image }} \
          OWNER="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com" \
          BUILD_STRATEGY=${{ inputs.build-strategy}} \
          IMAGE_TAG="${{ inputs.tag }}" \
          PLATFORM=linux/amd64

      - name: Push Docker image with version | ${{ inputs.environment }} ${{ inputs.image }}
        run: |
          make docker.push/${{ inputs.image }} \
          OWNER="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com" \
          IMAGE_TAG="${{ inputs.tag }}"

      - name: Tag Docker image with latest | ${{ inputs.environment }} ${{ inputs.image }}
        if: ${{ !inputs.pull-request }}
        run: |
          make docker.tag/${{ inputs.image }} \
          OWNER="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com" \
          IMAGE_TAG="${{ inputs.tag }}"

      - name: Untag Docker image with latest in remote ECR repo | ${{ inputs.environment }} ${{ inputs.image }}
        if: ${{ !inputs.pull-request && inputs.environment == 'prod' }}
        run: |
          make docker.untag/${{ inputs.image }} IMAGE_TAG="latest"

      - name: Push Docker image with latest | ${{ inputs.environment }} ${{ inputs.image }}
        if: ${{ !inputs.pull-request && inputs.environment == 'prod' }}
        run: |
          make docker.push/${{ inputs.image }} \
          OWNER="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com" \
          IMAGE_TAG="latest"
