---
name: Apps
on  :
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: Environment where code is deployed [prod, dev]
      app:
        required: true
        type: string
        description: App name.
      component:
        required: true
        type: string
        description: Component to build, test and deploy [frontend, backend]
      tag:
        required: true
        type: string
        description: Version tag of image.
      integration:
        required: true
        default: true
        type: boolean
        description: Whether to run integrations.
      release:
        required: true
        default: true
        type: boolean
        description: If false, only the app components that have been changed are ran, otherwise every app component is ran.
      use-s3-cache:
        type: boolean
        required: false
        default: true
        description: Whether to use s3-backed caching during building and pushing of the images
    secrets:
      AWS_ACCOUNT_ID:
        required: true
        description: AWS account ID.
      AWS_DEFAULT_REGION:
        required: true
        description: AWS account region
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key ID.
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS secret access key
      PROMPT_REGISTRY_APP_ID:
        required: true
        description: Prompt registry app ID.
      PROMPT_REGISTRY_APP_PRIVATE_KEY:
        required: true
        description: Prompt registry app private key.
      OPENAI_API_KEY:
        required: true
        description: OPENAI Api key.

jobs:
  deploy:
    name: 'Build, test & deploy: ${{ inputs.app }}-${{ inputs.component }}'
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      BUILDKIT_INLINE_CACHE: 1

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: files-changed
        name: Get a list of modified files.
        with:
          list-files: shell
          filters: |
            this:
              - added | modified: 'apps/${{ inputs.app }}/${{ inputs.component }}/**'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        if: ${{ inputs.release || steps.files-changed.outputs.this == 'true' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up Docker Buildx
        if: ${{ inputs.use-s3-cache }}
        uses: docker/setup-buildx-action@v2

      - name: Get ECR credentials | ${{ inputs.environment }} ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ (inputs.release || steps.files-changed.outputs.this == 'true') && !inputs.use-s3-cache }}
        run: make docker.login AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Login to ECR
        uses: docker/login-action@v2
        if: ${{ inputs.use-s3-cache }}
        with:
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Prebuild development image with layer cache
        id: build-and-push-development
        uses: docker/build-push-action@v4.2.1
        if: ${{ inputs.use-s3-cache }}
        with:
          context: .
          file: apps/${{ inputs.app }}/${{ inputs.component }}/Dockerfile
          load: true
          push: false
          platforms: linux/amd64
          no-cache-filters: debugger
          target: development
          # yamllint disable rule:line-length
          cache-from: |
            type=registry,ref=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ inputs.app }}-${{ inputs.component }}:${{ inputs.tag }}
          cache-to: |
            type=registry,ref=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ inputs.app }}-${{ inputs.component }}:${{ inputs.tag }}
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ inputs.app }}-${{ inputs.component }}:${{ inputs.tag }}
          # yamllint enable rule:line-length
          build-args: |
            TARGET_BUILD_STAGE=development
            BASE_IMAGE_TAG=v23.11.3
            IMAGE_TAG=${{ inputs.tag }}
            ENVIRONMENT=ci
            APP_NAME=${{ inputs.app }}
            APP_COMPONENT=${{ inputs.component }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            PROMPT_REGISTRY_APP_ID=${{ secrets.PROMPT_REGISTRY_APP_ID }}
            PROMPT_REGISTRY_APP_PRIVATE_KEY=${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}

      - name: Build App Docker Image | ${{ inputs.environment }}  ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ (inputs.release || steps.files-changed.outputs.this == 'true') && !inputs.use-s3-cache }}
        run: |
          make apps.build/${{ inputs.app }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          PROMPT_REGISTRY_APP_ID="${{ secrets.PROMPT_REGISTRY_APP_ID }}" \
          PROMPT_REGISTRY_APP_PRIVATE_KEY="${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Run app component unit tests | ${{ inputs.environment }} ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ (inputs.release || steps.files-changed.outputs.this == 'true') }}
        run: |
          make apps.unit/${{ inputs.app }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          PROMPT_REGISTRY_APP_ID="${{ secrets.PROMPT_REGISTRY_APP_ID }}" \
          PROMPT_REGISTRY_APP_PRIVATE_KEY="${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Run app component integration tests | ${{ inputs.environment }}  ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ ( inputs.release || steps.files-changed.outputs.this == 'true' ) && inputs.integration }}
        run: |
          make apps.integration/${{ inputs.app }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          PROMPT_REGISTRY_APP_ID="${{ secrets.PROMPT_REGISTRY_APP_ID }}" \
          PROMPT_REGISTRY_APP_PRIVATE_KEY="${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}" \
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Build Docker Image | ${{ inputs.environment }}  ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ (inputs.release || steps.files-changed.outputs.this == 'true') && !inputs.use-s3-cache }}
        run: |
          make apps.build/${{ inputs.app }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          PROMPT_REGISTRY_APP_ID="${{ secrets.PROMPT_REGISTRY_APP_ID }}" \
          PROMPT_REGISTRY_APP_PRIVATE_KEY="${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="production" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci" \
          USE_DOCKER_CACHE=true

      - name: Push Docker image with version | ${{ inputs.environment }}  ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ (inputs.release || steps.files-changed.outputs.this == 'true') && !inputs.use-s3-cache}}
        run: |
          make apps.deploy/${{ inputs.app }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          ENVIRONMENT="ci"

      - name: Prebuild production image with layer cache
        id: build-and-push-production
        uses: docker/build-push-action@v4.2.1
        if: ${{ inputs.use-s3-cache }}
        with:
          context: .
          file: apps/${{ inputs.app }}/${{ inputs.component }}/Dockerfile
          push: true
          platforms: linux/amd64
          no-cache-filters: debugger
          target: production
          # yamllint disable rule:line-length
          cache-from: |
            type=registry,ref=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ inputs.app }}-${{ inputs.component }}:${{ inputs.tag }}
          cache-to: |
            type=registry,ref=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ inputs.app }}-${{ inputs.component }}
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ inputs.app }}-${{ inputs.component }}:${{ inputs.tag }}
          # yamllint enable rule:line-length
          build-args: |
            TARGET_BUILD_STAGE=production
            BASE_IMAGE_TAG=v23.11.3
            IMAGE_TAG=${{ inputs.tag }}
            ENVIRONMENT=ci
            APP_NAME=${{ inputs.app }}
            APP_COMPONENT=${{ inputs.component }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            PROMPT_REGISTRY_APP_ID=${{ secrets.PROMPT_REGISTRY_APP_ID }}
            PROMPT_REGISTRY_APP_PRIVATE_KEY=${{ secrets.PROMPT_REGISTRY_APP_PRIVATE_KEY }}
