name: Apps
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment where code is deployed [prod, stage]"
      app:
        required: true
        type: string
        description: "App name."
      component:
        required: true
        type: string
        description: "Component to build, test and deploy [frontend, backend]"
      tag:
        required: true
        type: string
        description: "Version tag of image."
      integration:
        required: true
        default: true
        type: boolean
        description: "Whether to run integrations."
      pull-request:
        required: true
        default: true
        type: boolean
        description: "Indicates whether this workflow is running for a Pull Request."
    secrets:
      AWS_ACCOUNT_ID:
        required: true
        description: "AWS account ID."
      AWS_DEFAULT_REGION:
        required: true
        description: "AWS account region"
      AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key ID."
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"
      AWS_ROLE_TO_ASSUME:
        required: true
        description: "AWS IAM role to assume."

jobs:
  deploy:
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment }}
    env:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: get-changed-files
        name: Get a list of modified files.
        with:
          list-files: shell
          filters: |
            this:
              - added | modified: 'apps/${{ inputs.app }}/${{ inputs.component }}/**'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.files-changed.outputs.this == 'true' || !inputs.pull-request }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: DeployManifests

      - name: Get ECR credentials | ${{ inputs.environment }} ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ steps.files-changed.outputs.this == 'true' || !inputs.pull-request }}
        run: make docker.login AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Build Docker Image | ${{ inputs.environment }}  ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ steps.files-changed.outputs.this == 'true' }}
        run: |
          make apps.build/${{ inputs.app }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Run app component unit tests | ${{ inputs.environment }} ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ steps.files-changed.outputs.this == 'true' || !inputs.pull-request }}
        run: make apps.unit/${{ inputs.app }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          COMPONENT=${{ inputs.component }} \
          ENVIRONMENT="ci"

      - name: Run app component integration tests | ${{ inputs.environment }}  ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ inputs.integration && steps.files-changed.outputs.this == 'true' || !inputs.pull-request }}
        run: make apps.integration/${{ inputs.app }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          COMPONENT=${{ inputs.component }} \
          ENVIRONMENT="ci"

      - name: Build Docker Image | ${{ inputs.environment }}  ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ steps.files-changed.outputs.this == 'true' || !inputs.pull-request }}
        run: |
          make apps.build/${{ inputs.app }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="production" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Push Docker image with version | ${{ inputs.environment }}  ${{ inputs.app }}-${{ inputs.component }}
        if: ${{ steps.files-changed.outputs.this == 'true' || !inputs.pull-request }}
        run: |
          make apps.deploy/${{ inputs.app }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          ENVIRONMENT="ci"
