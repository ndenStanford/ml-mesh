name: ML-Mesh Prod Workflow

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod
    types:
      - ready_for_review
      - opened
      - synchronize
      - reopened

concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: Deployment ${{ github.ref_name }}

jobs:
  # ===============================================
  # QUALITY CHECKS
  # ===============================================

  run-code-quality-checks:
    name: Run Pre-Commit Checks
    uses: ./.github/workflows/_code-quality.yaml
    with:
      environment: prod
      pull-request: ${{ github.event_name == 'pull_request' }}
      timeout: 10

  # ===============================================
  # GET REPOSITORY STATE
  # ===============================================

  run-repository-state:
    name: Get Repository metadata
    uses: ./.github/workflows/_repository-state.yaml
    needs: [run-code-quality-checks]
    with:
      pull-request: ${{ github.event_name == 'pull_request' }}
      current-branch: ${{ github.ref_name }}
    secrets:
      GITHUB_TOKEN_: ${{ secrets.GITHUB_TOKEN }}

  # ===============================================
  # COMPILE MODELS
  # ===============================================

  run-ml-compilation-pipelines:
    name: Compile ML models
    uses: ./.github/workflows/_compile_model.yaml
    needs: [run-repository-state]

    strategy:
      matrix:
        environment: prod
        compile: ${{ github.event_name == 'push' }} # run the compilation pipeline on every release
        upload-compiled-model: ${{ github.event_name == 'push' }} # upload the compiled model on every release
        models:
          - runner-kind: custom
            self-hosted-runner-type: inf1.xlarge
            project: keywords
            tag: 2023.5.14

    with:
      environment: ${{ matrix.environment }}
      runner-kind: ${{ matrix.models.runner-kind }}
      self-hosted-runner-type: ${{ matrix.models.self-hosted-runner-type }}
      project: ${{ matrix.models.project }}
      tag: ${{ matrix.models.tag }}
      compile: ${{ matrix.compile }}
      upload-compiled-model: ${{ matrix.upload-compiled-model }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}

  # ===============================================
  # TEST LIBS
  # ===============================================

  run-libs-tests:
    name: Run libraries unit and integration tests.
    uses: ./.github/workflows/_libs.yaml
    needs: [run-repository-state]

    strategy:
      matrix:
        python-version: ["3.8.16"]
        poetry-version: ["1.3.2"]
        libs:
          - name: core
            integration: false
            functional: false

          - name: compile
            integration: false
            functional: false

          - name: models
            integration: false
            functional: false

          - name: tracking
            integration: false
            functional: false # TODO: turn this to true when self hosted runners are available.

    with:
      lib: ${{ matrix.libs.name }}
      integration: ${{ matrix.libs.integration }}
      functional: ${{ matrix.libs.functional }}
      python-version: ${{ matrix.python-version }}
      poetry-version: ${{ matrix.poetry-version }}

  # ===============================================
  # DOCKER
  # ===============================================

  run-docker:
    name: Core Docker Images.
    uses: ./.github/workflows/_docker.yaml
    needs: [run-repository-state, run-libs-tests]
    strategy:
      max-parallel: 1
      matrix:
        image:
          [
            python-base,
            neuron-compile,
            neuron-inference,
            kubeflow-jupyter,
            kubeflow-torch-cpu,
            kubeflow-data-science,
            fastapi-serve,
          ]
        validate-build: [false]
    with:
      environment: prod
      image: ${{ matrix.image }}
      tag: "${{ needs.run-repository-state.outputs.tag }}"
      pull-request: ${{ github.event_name == 'pull_request' }}
      validate-build: ${{ matrix.validate-build }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

  # ===============================================
  # PROJECTS
  # ===============================================

  # TODO: @sreza1 optimize runtime of this succession of jobs.

  run-projects:
    name: ML Project components
    uses: ./.github/workflows/_projects.yaml
    needs: [run-repository-state, run-libs-tests]
    strategy:
      max-parallel: 10
      matrix:
        projects:
          # NOTE: list of project components to run

          # ========================
          # KEYWORDS
          # ========================

          - name: keywords
            component: serve
            integration: true

          - name: keywords
            component: train
            integration: false

          - name: keywords
            component: compile
            integration: false

          # # ========================
          # # SUMMARIZATION
          # # ========================
          # serve
          - name: summarization
            component: serve
            integration: true

          # # ========================
          # # ENTITY LINKING
          # # ========================
          # serve
          - name: entity-linking
            component: serve
            integration: false

    with:
      environment: prod
      project: ${{ matrix.projects.name }}
      component: ${{ matrix.projects.component }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      integration: ${{ matrix.projects.integration }}
      pull-request: ${{ github.event_name == 'pull_request' }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}

  # ===============================================
  # APPS
  # ===============================================

  run-apps:
    name: Web Applications
    uses: ./.github/workflows/_apps.yaml
    needs: [run-repository-state, run-libs-tests]
    strategy:
      max-parallel: 10
      matrix:
        apps:
          # NOTE: list of apps components to run

          # ========================
          # Prompt manager
          # ========================

          - name: prompt
            component: backend
            integration: true

          - name: prompt
            component: frontend
            integration: false

          - name: entity-fishing
            component: backend
            integration: false

    with:
      environment: prod
      app: ${{ matrix.apps.name }}
      component: ${{ matrix.apps.component }}
      tag: ${{ needs.run-repository-state.outputs.tag }}
      integration: ${{ matrix.apps.integration }}
      pull-request: ${{ github.event_name == 'pull_request' }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
