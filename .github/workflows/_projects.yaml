name: Projects
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment where code is deployed [prod, stage]"
      project:
        required: true
        type: string
        description: "Project."
      component:
        required: true
        type: string
        description: "Component to build, test and deploy."
      tag:
        required: true
        type: string
        description: "Version tag of image."
      integration:
        required: true
        default: true
        type: boolean
        description: "Whether to run integrations."
      pull-request:
        required: true
        default: true
        type: boolean
        description: "Indicates whether this workflow is running for a Pull Request."
      python-version:
        required: false
        type: string
        default: "3.8.16"
        description: "Python version."
      poetry-version:
        required: false
        type: string
        default: "1.3.2"
        description: "Python version."
    secrets:
      AWS_ACCOUNT_ID:
        required: true
        description: "AWS account ID."
      AWS_DEFAULT_REGION:
        required: true
        description: "AWS account region"
      AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key ID."
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"
      AWS_ROLE_TO_ASSUME:
        required: true
        description: "AWS IAM role to assume."

jobs:
  deploy:
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment }}
    env:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: DeployManifests

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version-file: ".python-version"

      - name: Get Poetry version
        id: get-poetry-version
        run: |
          echo "::set-output name=poetry-version::$(cat .poetry-version)"

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ steps.get-poetry-version.outputs.poetry-version }}

      - name: Install project dependencies
        run: |
          make projects.install/${{ inputs.project }} COMPONENT=${{ inputs.component }}

      - name: Inject OPENAI API key for tests | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ inputs.project == 'gpt3_summarize' && inputs.component == 'serve' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Run project component unit tests | ${{ inputs.environment }} ${{ inputs.project }}-${{ inputs.component }}
        run: make projects.unit/${{ inputs.project }} COMPONENT=${{ inputs.component }}

      - name: Run project component integration tests | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ inputs.integration }}
        run: make projects.integration/${{ inputs.project }} COMPONENT=${{ inputs.component }}

      - name: Get ECR credentials | ${{ inputs.environment }} ${{ inputs.project }}-${{ inputs.component }}
        run: make docker.login AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Build Docker Image | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        run:
          make projects.build/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          OWNER="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com" \
          IMAGE_TAG="${{ inputs.tag }}" \
          PLATFORM=linux/amd64

      - name: Push Docker image with version | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        run: |
          make projects.deploy/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          OWNER="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com" \
          IMAGE_TAG="${{ inputs.tag }}"

      - name: Tag Docker image with latest | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ !inputs.pull-request }}
        run: |
          make projects.tag/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          OWNER="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com" \
          IMAGE_TAG="${{ inputs.tag }}"

      - name: Untag Docker image with latest in remote ECR repo | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ !inputs.pull-request && inputs.environment == 'prod' }}
        run: |
          make projects.tag/${{ inputs.project }} COMPONENT=${{ inputs.component }} IMAGE_TAG="latest"

      - name: Push Docker image with latest | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ !inputs.pull-request && inputs.environment == 'prod' }}
        run: |
          make projects.deploy/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          OWNER="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com" \
          IMAGE_TAG="latest"
