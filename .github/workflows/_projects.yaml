---
name: Projects
on  :
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: Environment where code is deployed [prod, stage]
      project:
        required: true
        type: string
        description: Project.
      component:
        required: true
        type: string
        description: Component to build, test and deploy.
      tag:
        required: true
        type: string
        description: Version tag of image.
      integration:
        required: true
        default: true
        type: boolean
        description: Whether to run integration test suite.
      functional:
        required: false
        default: false
        type: boolean
        description: Whether to run functional test suite. Only applicable to `serve` component.
      load:
        required: false
        default: false
        type: boolean
        description: Whether to run load test suite. Only applicable to `serve` component.
      pull-request:
        required: true
        default: true
        type: boolean
        description: Indicates whether this workflow is running for a Pull Request.
      release:
        required: true
        default: true
        type: boolean
        description: If false, only the project components that have been changed are ran, otherwise every project component is ran.
      runner-kind:
        required: true
        default: custom
        type: string
        description: If 'custom', a customized self hosted runner will be provided. Otherwise needs to be a valid Github Actions runner kind reference.
      self-hosted-runner-type:
        required: true
        default: inf1.2xlarge
        type: string
        description: Which EC2 instance type to provide as a self hosted runner. Only relevant if `runner-kind`='custom'.

    secrets:
      AWS_ACCOUNT_ID:
        required: true
        description: AWS account ID.
      AWS_DEFAULT_REGION:
        required: true
        description: AWS account region
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key ID.
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS secret access key
      OPENAI_API_KEY:
        required: true
        description: OPENAI Api key.
      NEPTUNE_API_TOKEN:
        required: true
        description: NEPTUNE AI authentication token for API calls.
      INTERNAL_ML_ENDPOINT_API_KEY:
        required: true
        description: Internal ml endpoint Api key.
      GH_PERSONAL_ACCESS_TOKEN:
        required: true
        description: Github PAT to allow EC2 instance to connect to Github repository content.

jobs:
  provision-customized-runner:
    name: Provision self-hosted & customized runner
    uses: ./.github/workflows/_provision_customized_runner.yaml
    if: ${{ inputs.runner-kind == 'custom' }}
    with:
      environment: ${{ inputs.environment }}
      self-hosted-runner-type: ${{ inputs.self-hosted-runner-type }}
      setup-docker-compose: true
      setup-neuron: true
    secrets:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  set-runner-specs:
    name: Set runner specs conditional on hosting requirements
    needs: provision-customized-runner
    runs-on: ubuntu-latest
    if: ${{ always() }}
    outputs:
      runner-label: ${{ steps.set-runner-label.outputs.value }}
      runner-instance-id: ${{ steps.set-runner-instance-id.outputs.value }}
    steps:
      - name: Toggle runner label
        uses: haya14busa/action-cond@v1
        id: set-runner-label
        with:
          cond: ${{ inputs.runner-kind == 'custom' }}
          if_true: ${{ needs.provision-customized-runner.outputs.runner-label }}
          if_false: ${{ inputs.runner-kind }}

      - name: Toggle runner instance type
        uses: haya14busa/action-cond@v1
        id: set-runner-instance-id
        with:
          cond: ${{ inputs.runner-kind == 'custom' }}
          if_true: ${{ needs.provision-customized-runner.outputs.runner-instance-id }}
          if_false: ''

  deploy:
    name: Run project test suite(s)
    needs: set-runner-specs
    runs-on: ${{ needs.set-runner-specs.outputs.runner-label }}
    if: ${{ always() }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: dorny/paths-filter@v2
        id: files-changed
        name: Get a list of modified files.
        with:
          list-files: shell
          filters: |
            this:
              - added | modified: 'projects/${{ inputs.project }}/${{ inputs.component }}/**'

      - name: Get ECR credentials | ${{ inputs.environment }} ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ inputs.release || steps.files-changed.outputs.this == 'true' }}
        run: make docker.login AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Build Project Docker Image | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ inputs.release || steps.files-changed.outputs.this == 'true' }}
        run: |
          make projects.build/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Run project component unit tests | ${{ inputs.environment }} ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ inputs.release || steps.files-changed.outputs.this == 'true' }}
        run: |
          make projects.unit/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Run project component integration tests | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ ( inputs.release || steps.files-changed.outputs.this == 'true' ) && inputs.integration }}
        run: |
          make projects.integration/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Run project component functional tests | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ ( inputs.release || steps.files-changed.outputs.this == 'true' ) && inputs.functional }}
        run: |
          make projects.functional/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Run project component load tests | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ ( inputs.release || steps.files-changed.outputs.this == 'true' ) && inputs.load }}
        run: |
          make projects.load/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Upload project component load test results | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ always() && ( inputs.release || steps.files-changed.outputs.this == 'true' ) && inputs.load }}
        run: |
          make projects.start/${{ inputs.project }} COMPONENT=${{ inputs.component }}-upload-results \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Build Docker Image | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ inputs.release || steps.files-changed.outputs.this == 'true' }}
        run: |
          make projects.build/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="production" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

      - name: Push Docker image with version | ${{ inputs.environment }}  ${{ inputs.project }}-${{ inputs.component }}
        if: ${{ inputs.release || steps.files-changed.outputs.this == 'true' }}
        run: |
          make projects.deploy/${{ inputs.project }} COMPONENT=${{ inputs.component }} \
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
          IMAGE_TAG="${{ inputs.tag }}" \
          TARGET_BUILD_STAGE="development" \
          PLATFORM=linux/amd64 \
          ENVIRONMENT="ci"

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [set-runner-specs, deploy]

    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: ${{ always() && inputs.runner-kind == 'custom' }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.set-runner-specs.outputs.runner-label }}
          ec2-instance-id: ${{ needs.set-runner-specs.outputs.runner-instance-id }}
