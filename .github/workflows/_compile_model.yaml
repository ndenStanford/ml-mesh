name: Model Compilation
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment where code is deployed [prod, stage]"
      self-hosted-runner-type:
        required: false
        default: inf1.6xlarge
        type: string
        description: "Which EC2 instance type to provide as a self hosted runner."
      compile:
        required: false
        default: false
        type: boolean
        description: "Whether to run the compilation pipeline"
      project:
        required: true
        type: string
        description: "Project."
      tag:
        required: true
        type: string
        description: "Version tag of image providing the compilation runtime context."
      pull-request:
        required: true
        default: true
        type: boolean
        description: "Indicates whether this workflow is running for a Pull Request."
      upload-compiled-model:
        required: false
        type: boolean
        default: true
        description: "Whether to upload the compiled model to the Neptune AI model registry"
    secrets:
      AWS_ACCOUNT_ID:
        required: true
        description: "AWS account ID."
      AWS_DEFAULT_REGION:
        required: true
        description: "AWS account region"
      AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS access key ID."
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS secret access key"
      AWS_ROLE_TO_ASSUME:
        required: true
        description: "AWS IAM role to assume."
      GH_PERSONAL_ACCESS_TOKEN:
        required: true
        description: "Github PAT to allow EC2 instance to connect to Github repository content."
      NEPTUNE_API_TOKEN:
        required: true
        description: "The API token for the neptune service account managing the model registry."

jobs:
  provision-runner:
    name: Provision self-hosted EC2 runner
    uses: ./.github/workflows/_provision_customized_runner.yaml
    with:
      environment: ${{ inputs.environment }}
      self-hosted-runner-type: ${{ inputs.self-hosted-runner-type }}
      setup-docker-compose: true
      setup-neuron: true
    secrets:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  compile-model:
    name: Compile and register a base or trained model
    needs: provision-runner
    runs-on: ${{ needs.provision-runner.outputs.runner-label }}
    environment: ${{ inputs.environment }}
    if: ${{ inputs.compile }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # - uses: dorny/paths-filter@v2
      #   id: files-changed
      #   name: Get a list of modified files.
      #   with:
      #     list-files: shell
      #     filters: |
      #       this:
      #         - added | modified: 'keywords/compile/config/.prod'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        #if: ${{ steps.files-changed.outputs.this == 'true' || !inputs.pull-request }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: DeployManifests

      - name: Get ECR credentials | ${{ inputs.environment }} ${{ inputs.image }}
        #if: ${{ steps.files-changed.outputs.this == 'true' || !inputs.pull-request }}
        run: make docker.login AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Test neuron compile using core docker test suite - temporary
        run: |
          make docker.validate/neuron-compile \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            IMAGE_TAG="${{ inputs.tag }}"

      - name: Download uncompiled model
        run: |
          echo 'Downloading Uncompiled Model'
          make projects.compile/${{ inputs.project }} \
            ENVIRONMENT=ci \
            PIPELINE_COMPONENT=download-model \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            IMAGE_TAG="${{ inputs.tag }}"

      - name: Compile Model
        run: |
          echo 'Compiling Model'
          make projects.compile/${{ inputs.project }} \
            ENVIRONMENT=ci \
            PIPELINE_COMPONENT=compile-model \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            IMAGE_TAG="${{ inputs.tag }}"

      - name: Validate Compiled Model
        run: |
          echo 'Validating Compiled Model'
          make projects.compile/${{ inputs.project }} \
            ENVIRONMENT=ci \
            PIPELINE_COMPONENT=validate-model \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            IMAGE_TAG="${{ inputs.tag }}"

      - name: Upload Compiled Model
        run: |
          echo 'Uploading Compiled Model'
          make projects.compile/${{ inputs.project }} \
            ENVIRONMENT=ci \
            PIPELINE_COMPONENT=upload-model \
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" \
            NEPTUNE_API_TOKEN="${{ secrets.NEPTUNE_API_TOKEN }}" \
            IMAGE_TAG="${{ inputs.tag }}"

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [provision-runner, compile-model]

    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: DeployManifests
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.provision-runner.outputs.runner-label }}
          ec2-instance-id: ${{ needs.provision-runner.outputs.runner-instance-id }}
